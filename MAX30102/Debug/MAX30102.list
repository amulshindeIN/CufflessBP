
MAX30102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800805c  0800805c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008064  08008064  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800806c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a7c  200001e4  08008250  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  08008250  00021c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167d2  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000305a  00000000  00000000  000369e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00039a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d98  00000000  00000000  0003a900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000239a6  00000000  00000000  0003b698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000edb0  00000000  00000000  0005f03e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c70ea  00000000  00000000  0006ddee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f3c  00000000  00000000  00134f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fa0 	.word	0x08007fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007fa0 	.word	0x08007fa0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);


int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b09e      	sub	sp, #120	; 0x78
 8000584:	af02      	add	r7, sp, #8

  HAL_Init();
 8000586:	f000 fa5d 	bl	8000a44 <HAL_Init>
  SystemClock_Config();
 800058a:	f000 f83d 	bl	8000608 <SystemClock_Config>
  MX_GPIO_Init();
 800058e:	f000 f8d3 	bl	8000738 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000592:	f000 f8a3 	bl	80006dc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000596:	f006 fbbb 	bl	8006d10 <MX_USB_DEVICE_Init>
  //uint8_t myBuf[40] = "Amul Shinde, Pissed off!\r\n";
  uint8_t myBuf[100];
  uint8_t retValue;
  uint32_t timeVal;

  spO2setup(ledCurrent6_4mA, MAX30102_SAMPLEAVG_4, MAX30102_MODE_REDIRONLY, MAX30102_SAMPLERATE_400, MAX30102_PULSEWIDTH_411, MAX30102_ADCRANGE_4096);
 800059a:	2320      	movs	r3, #32
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2303      	movs	r3, #3
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	230c      	movs	r3, #12
 80005a4:	2203      	movs	r2, #3
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	201f      	movs	r0, #31
 80005aa:	f006 fa31 	bl	8006a10 <spO2setup>
  HAL_Delay(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b2:	f000 fab9 	bl	8000b28 <HAL_Delay>

  while (1)
  {	  timeVal = HAL_GetTick();
 80005b6:	f000 faab 	bl	8000b10 <HAL_GetTick>
 80005ba:	66f8      	str	r0, [r7, #108]	; 0x6c
	  getData();
 80005bc:	f006 fb30 	bl	8006c20 <getData>
	  sprintf(myBuf, "%lu, %u, %u\r\n", timeVal, RedAmp,IRAmp);
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <main+0x7c>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <main+0x80>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	1d38      	adds	r0, r7, #4
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	4613      	mov	r3, r2
 80005d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80005d2:	490c      	ldr	r1, [pc, #48]	; (8000604 <main+0x84>)
 80005d4:	f007 f996 	bl	8007904 <siprintf>
	  retValue = CDC_Transmit_FS(myBuf, strlen((char *) myBuf));
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fdf8 	bl	80001d0 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	4611      	mov	r1, r2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f006 fc4f 	bl	8006e8c <CDC_Transmit_FS>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	  HAL_Delay(50);
 80005f4:	2032      	movs	r0, #50	; 0x32
 80005f6:	f000 fa97 	bl	8000b28 <HAL_Delay>
  {	  timeVal = HAL_GetTick();
 80005fa:	e7dc      	b.n	80005b6 <main+0x36>
 80005fc:	20000358 	.word	0x20000358
 8000600:	2000032a 	.word	0x2000032a
 8000604:	08007fb8 	.word	0x08007fb8

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f007 f8b4 	bl	8007784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fe3e 	bl	8003310 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069a:	f000 f8ad 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2105      	movs	r1, #5
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 f897 	bl	80037f0 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c8:	f000 f896 	bl	80007f8 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	; 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C1_Init+0x50>)
 800071a:	f000 fced 	bl	80010f8 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f868 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000214 	.word	0x20000214
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <MX_GPIO_Init+0xb8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <MX_GPIO_Init+0xb8>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_GPIO_Init+0xb8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_GPIO_Init+0xb8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a1f      	ldr	r2, [pc, #124]	; (80007f0 <MX_GPIO_Init+0xb8>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_GPIO_Init+0xb8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_GPIO_Init+0xb8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_GPIO_Init+0xb8>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_GPIO_Init+0xb8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_GPIO_Init+0xb8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a11      	ldr	r2, [pc, #68]	; (80007f0 <MX_GPIO_Init+0xb8>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_GPIO_Init+0xb8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80007c4:	480b      	ldr	r0, [pc, #44]	; (80007f4 <MX_GPIO_Init+0xbc>)
 80007c6:	f000 fc7d 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_GPIO_Init+0xbc>)
 80007e4:	f000 fad4 	bl	8000d90 <HAL_GPIO_Init>

}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020c00 	.word	0x40020c00

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_MspInit+0x4c>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <HAL_MspInit+0x4c>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x4c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_MspInit+0x4c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000846:	2007      	movs	r0, #7
 8000848:	f000 fa60 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a19      	ldr	r2, [pc, #100]	; (80008dc <HAL_I2C_MspInit+0x84>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d12b      	bne.n	80008d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000896:	23c0      	movs	r3, #192	; 0xc0
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089a:	2312      	movs	r3, #18
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a6:	2304      	movs	r3, #4
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <HAL_I2C_MspInit+0x8c>)
 80008b2:	f000 fa6d 	bl	8000d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 80008c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_I2C_MspInit+0x88>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40005400 	.word	0x40005400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f8d4 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <OTG_FS_IRQHandler+0x10>)
 800094a:	f001 fcae 	bl	80022aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20001854 	.word	0x20001854

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f006 fec2 	bl	8007710 <__errno>
 800098c:	4602      	mov	r2, r0
 800098e:	230c      	movs	r3, #12
 8000990:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20020000 	.word	0x20020000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	20000200 	.word	0x20000200
 80009c0:	20001c60 	.word	0x20001c60

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <SystemInit+0x28>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a07      	ldr	r2, [pc, #28]	; (80009ec <SystemInit+0x28>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <SystemInit+0x28>)
 80009da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009de:	609a      	str	r2, [r3, #8]
#endif
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009f6:	e003      	b.n	8000a00 <LoopCopyDataInit>

080009f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009fe:	3104      	adds	r1, #4

08000a00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a08:	d3f6      	bcc.n	80009f8 <CopyDataInit>
  ldr  r2, =_sbss
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a0c:	e002      	b.n	8000a14 <LoopFillZerobss>

08000a0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a10:	f842 3b04 	str.w	r3, [r2], #4

08000a14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a18:	d3f9      	bcc.n	8000a0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a1a:	f7ff ffd3 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f006 fe7d 	bl	800771c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff fdad 	bl	8000580 <main>
  bx  lr    
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a2c:	0800806c 	.word	0x0800806c
  ldr  r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a34:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000a38:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000a3c:	20001c60 	.word	0x20001c60

08000a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <HAL_Init+0x40>)
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_Init+0x40>)
 8000a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_Init+0x40>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f94d 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fec6 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f965 	bl	8000d76 <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f92d 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000380 	.word	0x20000380

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000380 	.word	0x20000380

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff ffee 	bl	8000b10 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_Delay+0x40>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffde 	bl	8000b10 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000008 	.word	0x20000008

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff29 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff3e 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff8e 	bl	8000c60 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5d 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff31 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffa2 	bl	8000cc8 <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	e16b      	b.n	8001084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f040 815a 	bne.w	800107e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d00b      	beq.n	8000dea <HAL_GPIO_Init+0x5a>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dde:	2b11      	cmp	r3, #17
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b12      	cmp	r3, #18
 8000de8:	d130      	bne.n	8000e4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	f003 0201 	and.w	r2, r3, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0xfc>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b12      	cmp	r3, #18
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80b4 	beq.w	800107e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b5f      	ldr	r3, [pc, #380]	; (8001098 <HAL_GPIO_Init+0x308>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a5e      	ldr	r2, [pc, #376]	; (8001098 <HAL_GPIO_Init+0x308>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b5c      	ldr	r3, [pc, #368]	; (8001098 <HAL_GPIO_Init+0x308>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	4a5a      	ldr	r2, [pc, #360]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a51      	ldr	r2, [pc, #324]	; (80010a0 <HAL_GPIO_Init+0x310>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d02b      	beq.n	8000fb6 <HAL_GPIO_Init+0x226>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a50      	ldr	r2, [pc, #320]	; (80010a4 <HAL_GPIO_Init+0x314>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d025      	beq.n	8000fb2 <HAL_GPIO_Init+0x222>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <HAL_GPIO_Init+0x318>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01f      	beq.n	8000fae <HAL_GPIO_Init+0x21e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	; (80010ac <HAL_GPIO_Init+0x31c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_GPIO_Init+0x21a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x320>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x216>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_GPIO_Init+0x324>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00d      	beq.n	8000fa2 <HAL_GPIO_Init+0x212>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x328>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x20e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x32c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_GPIO_Init+0x20a>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00e      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	e00c      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00a      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4934      	ldr	r1, [pc, #208]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_GPIO_Init+0x330>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104e:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_GPIO_Init+0x330>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f ae90 	bls.w	8000dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	3724      	adds	r7, #36	; 0x24
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40021c00 	.word	0x40021c00
 80010c0:	40013c00 	.word	0x40013c00

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e11f      	b.n	800134a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fb9a 	bl	8000858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2224      	movs	r2, #36	; 0x24
 8001128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0201 	bic.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800114a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800115a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800115c:	f002 fd12 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8001160:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a7b      	ldr	r2, [pc, #492]	; (8001354 <HAL_I2C_Init+0x25c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d807      	bhi.n	800117c <HAL_I2C_Init+0x84>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4a7a      	ldr	r2, [pc, #488]	; (8001358 <HAL_I2C_Init+0x260>)
 8001170:	4293      	cmp	r3, r2
 8001172:	bf94      	ite	ls
 8001174:	2301      	movls	r3, #1
 8001176:	2300      	movhi	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	e006      	b.n	800118a <HAL_I2C_Init+0x92>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4a77      	ldr	r2, [pc, #476]	; (800135c <HAL_I2C_Init+0x264>)
 8001180:	4293      	cmp	r3, r2
 8001182:	bf94      	ite	ls
 8001184:	2301      	movls	r3, #1
 8001186:	2300      	movhi	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e0db      	b.n	800134a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4a72      	ldr	r2, [pc, #456]	; (8001360 <HAL_I2C_Init+0x268>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9b      	lsrs	r3, r3, #18
 800119c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a64      	ldr	r2, [pc, #400]	; (8001354 <HAL_I2C_Init+0x25c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d802      	bhi.n	80011cc <HAL_I2C_Init+0xd4>
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3301      	adds	r3, #1
 80011ca:	e009      	b.n	80011e0 <HAL_I2C_Init+0xe8>
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	4a63      	ldr	r2, [pc, #396]	; (8001364 <HAL_I2C_Init+0x26c>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	099b      	lsrs	r3, r3, #6
 80011de:	3301      	adds	r3, #1
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	430b      	orrs	r3, r1
 80011e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4956      	ldr	r1, [pc, #344]	; (8001354 <HAL_I2C_Init+0x25c>)
 80011fc:	428b      	cmp	r3, r1
 80011fe:	d80d      	bhi.n	800121c <HAL_I2C_Init+0x124>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e59      	subs	r1, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fbb1 f3f3 	udiv	r3, r1, r3
 800120e:	3301      	adds	r3, #1
 8001210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001214:	2b04      	cmp	r3, #4
 8001216:	bf38      	it	cc
 8001218:	2304      	movcc	r3, #4
 800121a:	e04f      	b.n	80012bc <HAL_I2C_Init+0x1c4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d111      	bne.n	8001248 <HAL_I2C_Init+0x150>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1e58      	subs	r0, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6859      	ldr	r1, [r3, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	440b      	add	r3, r1
 8001232:	fbb0 f3f3 	udiv	r3, r0, r3
 8001236:	3301      	adds	r3, #1
 8001238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	e012      	b.n	800126e <HAL_I2C_Init+0x176>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	0099      	lsls	r1, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	fbb0 f3f3 	udiv	r3, r0, r3
 800125e:	3301      	adds	r3, #1
 8001260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_I2C_Init+0x17e>
 8001272:	2301      	movs	r3, #1
 8001274:	e022      	b.n	80012bc <HAL_I2C_Init+0x1c4>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10e      	bne.n	800129c <HAL_I2C_Init+0x1a4>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1e58      	subs	r0, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6859      	ldr	r1, [r3, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	440b      	add	r3, r1
 800128c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001290:	3301      	adds	r3, #1
 8001292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129a:	e00f      	b.n	80012bc <HAL_I2C_Init+0x1c4>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1e58      	subs	r0, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	0099      	lsls	r1, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	6809      	ldr	r1, [r1, #0]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69da      	ldr	r2, [r3, #28]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6911      	ldr	r1, [r2, #16]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68d2      	ldr	r2, [r2, #12]
 80012f6:	4311      	orrs	r1, r2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2220      	movs	r2, #32
 8001336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	000186a0 	.word	0x000186a0
 8001358:	001e847f 	.word	0x001e847f
 800135c:	003d08ff 	.word	0x003d08ff
 8001360:	431bde83 	.word	0x431bde83
 8001364:	10624dd3 	.word	0x10624dd3

08001368 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af02      	add	r7, sp, #8
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	461a      	mov	r2, r3
 8001374:	460b      	mov	r3, r1
 8001376:	817b      	strh	r3, [r7, #10]
 8001378:	4613      	mov	r3, r2
 800137a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff fbc8 	bl	8000b10 <HAL_GetTick>
 8001380:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b20      	cmp	r3, #32
 800138c:	f040 80e0 	bne.w	8001550 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2319      	movs	r3, #25
 8001396:	2201      	movs	r2, #1
 8001398:	4970      	ldr	r1, [pc, #448]	; (800155c <HAL_I2C_Master_Transmit+0x1f4>)
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 fc58 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0d3      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_I2C_Master_Transmit+0x50>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e0cc      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d007      	beq.n	80013de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2221      	movs	r2, #33	; 0x21
 80013f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2210      	movs	r2, #16
 80013fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	893a      	ldrh	r2, [r7, #8]
 800140e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a50      	ldr	r2, [pc, #320]	; (8001560 <HAL_I2C_Master_Transmit+0x1f8>)
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001420:	8979      	ldrh	r1, [r7, #10]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	6a3a      	ldr	r2, [r7, #32]
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fac2 	bl	80019b0 <I2C_MasterRequestWrite>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e08d      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800144c:	e066      	b.n	800151c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	6a39      	ldr	r1, [r7, #32]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 fcd2 	bl	8001dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00d      	beq.n	800147a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2b04      	cmp	r3, #4
 8001464:	d107      	bne.n	8001476 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e06b      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b01      	subs	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d11b      	bne.n	80014f0 <HAL_I2C_Master_Transmit+0x188>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d017      	beq.n	80014f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	6a39      	ldr	r1, [r7, #32]
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 fcc2 	bl	8001e7e <I2C_WaitOnBTFFlagUntilTimeout>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00d      	beq.n	800151c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	2b04      	cmp	r3, #4
 8001506:	d107      	bne.n	8001518 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001516:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e01a      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d194      	bne.n	800144e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2220      	movs	r2, #32
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e000      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001550:	2302      	movs	r3, #2
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	00100002 	.word	0x00100002
 8001560:	ffff0000 	.word	0xffff0000

08001564 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af02      	add	r7, sp, #8
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	461a      	mov	r2, r3
 8001570:	460b      	mov	r3, r1
 8001572:	817b      	strh	r3, [r7, #10]
 8001574:	4613      	mov	r3, r2
 8001576:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff faca 	bl	8000b10 <HAL_GetTick>
 800157c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b20      	cmp	r3, #32
 8001588:	f040 820b 	bne.w	80019a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2319      	movs	r3, #25
 8001592:	2201      	movs	r2, #1
 8001594:	497c      	ldr	r1, [pc, #496]	; (8001788 <HAL_I2C_Master_Receive+0x224>)
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 fb5a 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80015a2:	2302      	movs	r3, #2
 80015a4:	e1fe      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_I2C_Master_Receive+0x50>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e1f7      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d007      	beq.n	80015da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2222      	movs	r2, #34	; 0x22
 80015ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2210      	movs	r2, #16
 80015f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	893a      	ldrh	r2, [r7, #8]
 800160a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4a5c      	ldr	r2, [pc, #368]	; (800178c <HAL_I2C_Master_Receive+0x228>)
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800161c:	8979      	ldrh	r1, [r7, #10]
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fa46 	bl	8001ab4 <I2C_MasterRequestRead>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e1b8      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001636:	2b00      	cmp	r3, #0
 8001638:	d113      	bne.n	8001662 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	623b      	str	r3, [r7, #32]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e18c      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	2b01      	cmp	r3, #1
 8001668:	d11b      	bne.n	80016a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001678:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e16c      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d11b      	bne.n	80016e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	e14c      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001708:	e138      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170e:	2b03      	cmp	r3, #3
 8001710:	f200 80f1 	bhi.w	80018f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001718:	2b01      	cmp	r3, #1
 800171a:	d123      	bne.n	8001764 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 fbed 	bl	8001f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e139      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001762:	e10b      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001768:	2b02      	cmp	r3, #2
 800176a:	d14e      	bne.n	800180a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001772:	2200      	movs	r2, #0
 8001774:	4906      	ldr	r1, [pc, #24]	; (8001790 <HAL_I2C_Master_Receive+0x22c>)
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 fa6a 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e10e      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
 8001786:	bf00      	nop
 8001788:	00100002 	.word	0x00100002
 800178c:	ffff0000 	.word	0xffff0000
 8001790:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fe:	b29b      	uxth	r3, r3
 8001800:	3b01      	subs	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001808:	e0b8      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001810:	2200      	movs	r2, #0
 8001812:	4966      	ldr	r1, [pc, #408]	; (80019ac <HAL_I2C_Master_Receive+0x448>)
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 fa1b 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0bf      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186c:	2200      	movs	r2, #0
 800186e:	494f      	ldr	r1, [pc, #316]	; (80019ac <HAL_I2C_Master_Receive+0x448>)
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 f9ed 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e091      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018f4:	e042      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 fb00 	bl	8001f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e04c      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001926:	3b01      	subs	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b04      	cmp	r3, #4
 8001948:	d118      	bne.n	800197c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001966:	3b01      	subs	r3, #1
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	2b00      	cmp	r3, #0
 8001982:	f47f aec2 	bne.w	800170a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80019a2:	2302      	movs	r3, #2
  }
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3728      	adds	r7, #40	; 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	00010004 	.word	0x00010004

080019b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	460b      	mov	r3, r1
 80019be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d006      	beq.n	80019da <I2C_MasterRequestWrite+0x2a>
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d003      	beq.n	80019da <I2C_MasterRequestWrite+0x2a>
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019d8:	d108      	bne.n	80019ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e00b      	b.n	8001a04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	2b12      	cmp	r3, #18
 80019f2:	d107      	bne.n	8001a04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f91d 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2a:	d103      	bne.n	8001a34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e035      	b.n	8001aa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a40:	d108      	bne.n	8001a54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a42:	897b      	ldrh	r3, [r7, #10]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	e01b      	b.n	8001a8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a54:	897b      	ldrh	r3, [r7, #10]
 8001a56:	11db      	asrs	r3, r3, #7
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f003 0306 	and.w	r3, r3, #6
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f063 030f 	orn	r3, r3, #15
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	490e      	ldr	r1, [pc, #56]	; (8001aac <I2C_MasterRequestWrite+0xfc>)
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f943 	bl	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e010      	b.n	8001aa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a82:	897b      	ldrh	r3, [r7, #10]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <I2C_MasterRequestWrite+0x100>)
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f933 	bl	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	00010008 	.word	0x00010008
 8001ab0:	00010002 	.word	0x00010002

08001ab4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ad8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d006      	beq.n	8001aee <I2C_MasterRequestRead+0x3a>
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d003      	beq.n	8001aee <I2C_MasterRequestRead+0x3a>
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aec:	d108      	bne.n	8001b00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e00b      	b.n	8001b18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	2b11      	cmp	r3, #17
 8001b06:	d107      	bne.n	8001b18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f893 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00d      	beq.n	8001b4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3e:	d103      	bne.n	8001b48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e079      	b.n	8001c40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b54:	d108      	bne.n	8001b68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b56:	897b      	ldrh	r3, [r7, #10]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	e05f      	b.n	8001c28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b68:	897b      	ldrh	r3, [r7, #10]
 8001b6a:	11db      	asrs	r3, r3, #7
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f003 0306 	and.w	r3, r3, #6
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f063 030f 	orn	r3, r3, #15
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4930      	ldr	r1, [pc, #192]	; (8001c48 <I2C_MasterRequestRead+0x194>)
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f8b9 	bl	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e054      	b.n	8001c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b96:	897b      	ldrh	r3, [r7, #10]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4929      	ldr	r1, [pc, #164]	; (8001c4c <I2C_MasterRequestRead+0x198>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f8a9 	bl	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e044      	b.n	8001c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 f831 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00d      	beq.n	8001c10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c02:	d103      	bne.n	8001c0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e017      	b.n	8001c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001c10:	897b      	ldrh	r3, [r7, #10]
 8001c12:	11db      	asrs	r3, r3, #7
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 0306 	and.w	r3, r3, #6
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f063 030e 	orn	r3, r3, #14
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <I2C_MasterRequestRead+0x198>)
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f865 	bl	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	00010008 	.word	0x00010008
 8001c4c:	00010002 	.word	0x00010002

08001c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c60:	e025      	b.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d021      	beq.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6a:	f7fe ff51 	bl	8000b10 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d302      	bcc.n	8001c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d116      	bne.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f043 0220 	orr.w	r2, r3, #32
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e023      	b.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10d      	bne.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	e00c      	b.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d0b6      	beq.n	8001c62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d0c:	e051      	b.n	8001db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1c:	d123      	bne.n	8001d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f043 0204 	orr.w	r2, r3, #4
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e046      	b.n	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d021      	beq.n	8001db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6e:	f7fe fecf 	bl	8000b10 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d302      	bcc.n	8001d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d116      	bne.n	8001db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f043 0220 	orr.w	r2, r3, #32
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e020      	b.n	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10c      	bne.n	8001dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bf14      	ite	ne
 8001dce:	2301      	movne	r3, #1
 8001dd0:	2300      	moveq	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	e00b      	b.n	8001dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4013      	ands	r3, r2
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d18d      	bne.n	8001d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e08:	e02d      	b.n	8001e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f8ce 	bl	8001fac <I2C_IsAcknowledgeFailed>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e02d      	b.n	8001e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d021      	beq.n	8001e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e22:	f7fe fe75 	bl	8000b10 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d302      	bcc.n	8001e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d116      	bne.n	8001e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f043 0220 	orr.w	r2, r3, #32
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e007      	b.n	8001e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e70:	2b80      	cmp	r3, #128	; 0x80
 8001e72:	d1ca      	bne.n	8001e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e8a:	e02d      	b.n	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f88d 	bl	8001fac <I2C_IsAcknowledgeFailed>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e02d      	b.n	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	d021      	beq.n	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea4:	f7fe fe34 	bl	8000b10 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d302      	bcc.n	8001eba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d116      	bne.n	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d1ca      	bne.n	8001e8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f0c:	e042      	b.n	8001f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d119      	bne.n	8001f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0210 	mvn.w	r2, #16
 8001f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e029      	b.n	8001fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f50:	f7fe fdde 	bl	8000b10 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d302      	bcc.n	8001f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f043 0220 	orr.w	r2, r3, #32
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e007      	b.n	8001fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b40      	cmp	r3, #64	; 0x40
 8001fa0:	d1b5      	bne.n	8001f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d11b      	bne.n	8001ffc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f043 0204 	orr.w	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800200a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200c:	b08f      	sub	sp, #60	; 0x3c
 800200e:	af0a      	add	r7, sp, #40	; 0x28
 8002010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e10f      	b.n	800223c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f005 f86e 	bl	8007118 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f001 febb 	bl	8003dd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	687e      	ldr	r6, [r7, #4]
 8002068:	466d      	mov	r5, sp
 800206a:	f106 0410 	add.w	r4, r6, #16
 800206e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800207a:	e885 0003 	stmia.w	r5, {r0, r1}
 800207e:	1d33      	adds	r3, r6, #4
 8002080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002082:	6838      	ldr	r0, [r7, #0]
 8002084:	f001 fd92 	bl	8003bac <USB_CoreInit>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2202      	movs	r2, #2
 8002092:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0d0      	b.n	800223c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 fea9 	bl	8003df8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e04a      	b.n	8002142 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	333d      	adds	r3, #61	; 0x3d
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	333c      	adds	r3, #60	; 0x3c
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	b298      	uxth	r0, r3
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	3342      	adds	r3, #66	; 0x42
 80020e8:	4602      	mov	r2, r0
 80020ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	333f      	adds	r3, #63	; 0x3f
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3344      	adds	r3, #68	; 0x44
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3348      	adds	r3, #72	; 0x48
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3350      	adds	r3, #80	; 0x50
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	3301      	adds	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d3af      	bcc.n	80020ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e044      	b.n	80021dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	3301      	adds	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d3b5      	bcc.n	8002152 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	687e      	ldr	r6, [r7, #4]
 80021ee:	466d      	mov	r5, sp
 80021f0:	f106 0410 	add.w	r4, r6, #16
 80021f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002200:	e885 0003 	stmia.w	r5, {r0, r1}
 8002204:	1d33      	adds	r3, r6, #4
 8002206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002208:	6838      	ldr	r0, [r7, #0]
 800220a:	f001 fe1f 	bl	8003e4c <USB_DevInit>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e00d      	b.n	800223c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fe67 	bl	8004f08 <USB_DevDisconnect>

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002244 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_PCD_Start+0x1c>
 800225c:	2302      	movs	r3, #2
 800225e:	e020      	b.n	80022a2 <HAL_PCD_Start+0x5e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	2b01      	cmp	r3, #1
 800226e:	d109      	bne.n	8002284 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002274:	2b01      	cmp	r3, #1
 8002276:	d005      	beq.n	8002284 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f001 fd93 	bl	8003db4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f002 fe17 	bl	8004ec6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022aa:	b590      	push	{r4, r7, lr}
 80022ac:	b08d      	sub	sp, #52	; 0x34
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 fed5 	bl	8005070 <USB_GetMode>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 839d 	bne.w	8002a08 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fe39 	bl	8004f4a <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8393 	beq.w	8002a06 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fe30 	bl	8004f4a <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d107      	bne.n	8002304 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f002 0202 	and.w	r2, r2, #2
 8002302:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f002 fe1e 	bl	8004f4a <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b10      	cmp	r3, #16
 8002316:	d161      	bne.n	80023dc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0210 	bic.w	r2, r2, #16
 8002326:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f003 020f 	and.w	r2, r3, #15
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	0c5b      	lsrs	r3, r3, #17
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	2b02      	cmp	r3, #2
 8002352:	d124      	bne.n	800239e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d035      	beq.n	80023cc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800236a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	6a38      	ldr	r0, [r7, #32]
 8002374:	f002 fc84 	bl	8004c80 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002384:	441a      	add	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002396:	441a      	add	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	619a      	str	r2, [r3, #24]
 800239c:	e016      	b.n	80023cc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	0c5b      	lsrs	r3, r3, #17
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d110      	bne.n	80023cc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023b0:	2208      	movs	r2, #8
 80023b2:	4619      	mov	r1, r3
 80023b4:	6a38      	ldr	r0, [r7, #32]
 80023b6:	f002 fc63 	bl	8004c80 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c6:	441a      	add	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0210 	orr.w	r2, r2, #16
 80023da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f002 fdb2 	bl	8004f4a <USB_ReadInterrupts>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023f0:	d16e      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 fdb8 	bl	8004f70 <USB_ReadDevAllOutEpInterrupt>
 8002400:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002402:	e062      	b.n	80024ca <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d057      	beq.n	80024be <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f002 fddd 	bl	8004fd8 <USB_ReadDevOutEPInterrupt>
 800241e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00c      	beq.n	8002444 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002436:	461a      	mov	r2, r3
 8002438:	2301      	movs	r3, #1
 800243a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800243c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fdb0 	bl	8002fa4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00c      	beq.n	8002468 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245a:	461a      	mov	r2, r3
 800245c:	2308      	movs	r3, #8
 800245e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 feaa 	bl	80031bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247e:	461a      	mov	r2, r3
 8002480:	2310      	movs	r3, #16
 8002482:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249a:	461a      	mov	r2, r3
 800249c:	2320      	movs	r3, #32
 800249e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b6:	461a      	mov	r2, r3
 80024b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	3301      	adds	r3, #1
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d199      	bne.n	8002404 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 fd38 	bl	8004f4a <USB_ReadInterrupts>
 80024da:	4603      	mov	r3, r0
 80024dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024e4:	f040 80c0 	bne.w	8002668 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 fd59 	bl	8004fa4 <USB_ReadDevAllInEpInterrupt>
 80024f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024f8:	e0b2      	b.n	8002660 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a7 	beq.w	8002654 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f002 fd7f 	bl	8005014 <USB_ReadDevInEPInterrupt>
 8002516:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d057      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	2201      	movs	r2, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43db      	mvns	r3, r3
 800253c:	69f9      	ldr	r1, [r7, #28]
 800253e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002542:	4013      	ands	r3, r2
 8002544:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002552:	461a      	mov	r2, r3
 8002554:	2301      	movs	r3, #1
 8002556:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d132      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3348      	adds	r3, #72	; 0x48
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4403      	add	r3, r0
 8002580:	3344      	adds	r3, #68	; 0x44
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4419      	add	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4403      	add	r3, r0
 8002594:	3348      	adds	r3, #72	; 0x48
 8002596:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	2b00      	cmp	r3, #0
 800259c:	d113      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x31c>
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3350      	adds	r3, #80	; 0x50
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d108      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025be:	461a      	mov	r2, r3
 80025c0:	2101      	movs	r1, #1
 80025c2:	f002 fd87 	bl	80050d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f004 fe24 	bl	800721a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e8:	461a      	mov	r2, r3
 80025ea:	2308      	movs	r3, #8
 80025ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002604:	461a      	mov	r2, r3
 8002606:	2310      	movs	r3, #16
 8002608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002620:	461a      	mov	r2, r3
 8002622:	2340      	movs	r3, #64	; 0x40
 8002624:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263c:	461a      	mov	r2, r3
 800263e:	2302      	movs	r3, #2
 8002640:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800264c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fc1b 	bl	8002e8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	3301      	adds	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	f47f af49 	bne.w	80024fa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fc6c 	bl	8004f4a <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800267c:	d122      	bne.n	80026c4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002698:	2b01      	cmp	r3, #1
 800269a:	d108      	bne.n	80026ae <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026a4:	2100      	movs	r1, #0
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fe26 	bl	80032f8 <HAL_PCDEx_LPM_Callback>
 80026ac:	e002      	b.n	80026b4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f004 fe2a 	bl	8007308 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 fc3e 	bl	8004f4a <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d8:	d112      	bne.n	8002700 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f004 fde6 	bl	80072bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026fe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f002 fc20 	bl	8004f4a <USB_ReadInterrupts>
 800270a:	4603      	mov	r3, r0
 800270c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002714:	f040 80c7 	bne.w	80028a6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2110      	movs	r1, #16
 8002732:	4618      	mov	r0, r3
 8002734:	f001 fcee 	bl	8004114 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273c:	e056      	b.n	80027ec <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274a:	461a      	mov	r2, r3
 800274c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002750:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002762:	0151      	lsls	r1, r2, #5
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	440a      	add	r2, r1
 8002768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800276c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002770:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	4413      	add	r3, r2
 800277a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002782:	0151      	lsls	r1, r2, #5
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	440a      	add	r2, r1
 8002788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800278c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002790:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279e:	461a      	mov	r2, r3
 80027a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b6:	0151      	lsls	r1, r2, #5
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	440a      	add	r2, r1
 80027bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d6:	0151      	lsls	r1, r2, #5
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	440a      	add	r2, r1
 80027dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	3301      	adds	r3, #1
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d3a3      	bcc.n	800273e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002804:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002808:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002822:	f043 030b 	orr.w	r3, r3, #11
 8002826:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002838:	f043 030b 	orr.w	r3, r3, #11
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	e015      	b.n	800286c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002852:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002856:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002866:	f043 030b 	orr.w	r3, r3, #11
 800286a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800287a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800287e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002890:	461a      	mov	r2, r3
 8002892:	f002 fc1f 	bl	80050d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fb4d 	bl	8004f4a <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ba:	d124      	bne.n	8002906 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 fbe3 	bl	800508c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 fc83 	bl	80041d6 <USB_GetDevSpeed>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	f001 f946 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 80028e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	4620      	mov	r0, r4
 80028ec:	f001 f9c0 	bl	8003c70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f004 fcba 	bl	800726a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002904:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f002 fb1d 	bl	8004f4a <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b08      	cmp	r3, #8
 8002918:	d10a      	bne.n	8002930 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f004 fc97 	bl	800724e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f002 0208 	and.w	r2, r2, #8
 800292e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f002 fb08 	bl	8004f4a <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002944:	d10f      	bne.n	8002966 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	b2db      	uxtb	r3, r3
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f004 fcf9 	bl	8007348 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f002 faed 	bl	8004f4a <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800297a:	d10f      	bne.n	800299c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f004 fccc 	bl	8007324 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800299a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fad2 	bl	8004f4a <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d10a      	bne.n	80029c8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f004 fcda 	bl	800736c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fabc 	bl	8004f4a <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d115      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f004 fcca 	bl	8007388 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6859      	ldr	r1, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	e000      	b.n	8002a08 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002a06:	bf00      	nop
    }
  }
}
 8002a08:	3734      	adds	r7, #52	; 0x34
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}

08002a0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_PCD_SetAddress+0x1a>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e013      	b.n	8002a50 <HAL_PCD_SetAddress+0x42>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fa1a 	bl	8004e7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	70fb      	strb	r3, [r7, #3]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	803b      	strh	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0f      	bge.n	8002a9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3338      	adds	r3, #56	; 0x38
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	705a      	strb	r2, [r3, #1]
 8002a9c:	e00f      	b.n	8002abe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aca:	883a      	ldrh	r2, [r7, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	78ba      	ldrb	r2, [r7, #2]
 8002ad4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	785b      	ldrb	r3, [r3, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ae8:	78bb      	ldrb	r3, [r7, #2]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d102      	bne.n	8002af4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_PCD_EP_Open+0xaa>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e00e      	b.n	8002b20 <HAL_PCD_EP_Open+0xc8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fb85 	bl	8004220 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da0f      	bge.n	8002b5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3338      	adds	r3, #56	; 0x38
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	705a      	strb	r2, [r3, #1]
 8002b5a:	e00f      	b.n	8002b7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_PCD_EP_Close+0x6e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e00e      	b.n	8002bb4 <HAL_PCD_EP_Close+0x8c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68f9      	ldr	r1, [r7, #12]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fbc3 	bl	8004330 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	7afb      	ldrb	r3, [r7, #11]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c18:	7afb      	ldrb	r3, [r7, #11]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	6979      	ldr	r1, [r7, #20]
 8002c30:	f001 fe9e 	bl	8004970 <USB_EP0StartXfer>
 8002c34:	e008      	b.n	8002c48 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6979      	ldr	r1, [r7, #20]
 8002c44:	f001 fc50 	bl	80044e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c74:	681b      	ldr	r3, [r3, #0]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c92:	7afb      	ldrb	r3, [r7, #11]
 8002c94:	f003 020f 	and.w	r2, r3, #15
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	3338      	adds	r3, #56	; 0x38
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6979      	ldr	r1, [r7, #20]
 8002cf4:	f001 fe3c 	bl	8004970 <USB_EP0StartXfer>
 8002cf8:	e008      	b.n	8002d0c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	6979      	ldr	r1, [r7, #20]
 8002d08:	f001 fbee 	bl	80044e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 020f 	and.w	r2, r3, #15
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d901      	bls.n	8002d34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e050      	b.n	8002dd6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	da0f      	bge.n	8002d5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	3338      	adds	r3, #56	; 0x38
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	705a      	strb	r2, [r3, #1]
 8002d5a:	e00d      	b.n	8002d78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3304      	adds	r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_PCD_EP_SetStall+0x82>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e01e      	b.n	8002dd6 <HAL_PCD_EP_SetStall+0xc0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68f9      	ldr	r1, [r7, #12]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 ff93 	bl	8004cd2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	b2d9      	uxtb	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f002 f984 	bl	80050d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d901      	bls.n	8002dfc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e042      	b.n	8002e82 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	da0f      	bge.n	8002e24 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 020f 	and.w	r2, r3, #15
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	3338      	adds	r3, #56	; 0x38
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	3304      	adds	r3, #4
 8002e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	705a      	strb	r2, [r3, #1]
 8002e22:	e00f      	b.n	8002e44 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_PCD_EP_ClrStall+0x86>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e00e      	b.n	8002e82 <HAL_PCD_EP_ClrStall+0xa4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 ff9b 	bl	8004dae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b08a      	sub	sp, #40	; 0x28
 8002e8e:	af02      	add	r7, sp, #8
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3338      	adds	r3, #56	; 0x38
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d901      	bls.n	8002ec2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e06c      	b.n	8002f9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d902      	bls.n	8002ede <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3303      	adds	r3, #3
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ee6:	e02b      	b.n	8002f40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d902      	bls.n	8002f04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	3303      	adds	r3, #3
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68d9      	ldr	r1, [r3, #12]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	4603      	mov	r3, r0
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f001 fe77 	bl	8004c16 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	441a      	add	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	441a      	add	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d809      	bhi.n	8002f6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d203      	bcs.n	8002f6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1be      	bne.n	8002ee8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d811      	bhi.n	8002f9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	6939      	ldr	r1, [r7, #16]
 8002f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f96:	4013      	ands	r3, r2
 8002f98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	333c      	adds	r3, #60	; 0x3c
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f040 80a0 	bne.w	800311c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d015      	beq.n	8003012 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a72      	ldr	r2, [pc, #456]	; (80031b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	f240 80dd 	bls.w	80031aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80d7 	beq.w	80031aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003008:	461a      	mov	r2, r3
 800300a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800300e:	6093      	str	r3, [r2, #8]
 8003010:	e0cb      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003028:	461a      	mov	r2, r3
 800302a:	2320      	movs	r3, #32
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	e0bc      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 80b7 	bne.w	80031aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d90f      	bls.n	8003064 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305a:	461a      	mov	r2, r3
 800305c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003060:	6093      	str	r3, [r2, #8]
 8003062:	e0a2      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003076:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	0159      	lsls	r1, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	440b      	add	r3, r1
 8003080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800308a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4403      	add	r3, r0
 800309a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800309e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4403      	add	r3, r0
 80030c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4419      	add	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4403      	add	r3, r0
 80030d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d114      	bne.n	800310e <PCD_EP_OutXfrComplete_int+0x16a>
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d108      	bne.n	800310e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003106:	461a      	mov	r2, r3
 8003108:	2101      	movs	r1, #1
 800310a:	f001 ffe3 	bl	80050d4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	4619      	mov	r1, r3
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f004 f865 	bl	80071e4 <HAL_PCD_DataOutStageCallback>
 800311a:	e046      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a26      	ldr	r2, [pc, #152]	; (80031b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d124      	bne.n	800316e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313a:	461a      	mov	r2, r3
 800313c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003140:	6093      	str	r3, [r2, #8]
 8003142:	e032      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315a:	461a      	mov	r2, r3
 800315c:	2320      	movs	r3, #32
 800315e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f004 f83c 	bl	80071e4 <HAL_PCD_DataOutStageCallback>
 800316c:	e01d      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d114      	bne.n	800319e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d108      	bne.n	800319e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003196:	461a      	mov	r2, r3
 8003198:	2100      	movs	r1, #0
 800319a:	f001 ff9b 	bl	80050d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f004 f81d 	bl	80071e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	4f54300a 	.word	0x4f54300a
 80031b8:	4f54310a 	.word	0x4f54310a

080031bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	333c      	adds	r3, #60	; 0x3c
 80031d4:	3304      	adds	r3, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d90e      	bls.n	8003210 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003208:	461a      	mov	r2, r3
 800320a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f003 ffd5 	bl	80071c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <PCD_EP_OutSetupPacket_int+0x88>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d90c      	bls.n	8003238 <PCD_EP_OutSetupPacket_int+0x7c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003230:	461a      	mov	r2, r3
 8003232:	2101      	movs	r1, #1
 8003234:	f001 ff4e 	bl	80050d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	4f54300a 	.word	0x4f54300a

08003248 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
 8003254:	4613      	mov	r3, r2
 8003256:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003266:	883b      	ldrh	r3, [r7, #0]
 8003268:	0419      	lsls	r1, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	430a      	orrs	r2, r1
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
 8003274:	e028      	b.n	80032c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	e00d      	b.n	80032a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	3340      	adds	r3, #64	; 0x40
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	3301      	adds	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3ec      	bcc.n	800328a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032b0:	883b      	ldrh	r3, [r7, #0]
 80032b2:	0418      	lsls	r0, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6819      	ldr	r1, [r3, #0]
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	4302      	orrs	r2, r0
 80032c0:	3340      	adds	r3, #64	; 0x40
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e25b      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d075      	beq.n	800341a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332e:	4ba3      	ldr	r3, [pc, #652]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b04      	cmp	r3, #4
 8003338:	d00c      	beq.n	8003354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333a:	4ba0      	ldr	r3, [pc, #640]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003342:	2b08      	cmp	r3, #8
 8003344:	d112      	bne.n	800336c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003346:	4b9d      	ldr	r3, [pc, #628]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003352:	d10b      	bne.n	800336c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	4b99      	ldr	r3, [pc, #612]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d05b      	beq.n	8003418 <HAL_RCC_OscConfig+0x108>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d157      	bne.n	8003418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e236      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d106      	bne.n	8003384 <HAL_RCC_OscConfig+0x74>
 8003376:	4b91      	ldr	r3, [pc, #580]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a90      	ldr	r2, [pc, #576]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e01d      	b.n	80033c0 <HAL_RCC_OscConfig+0xb0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x98>
 800338e:	4b8b      	ldr	r3, [pc, #556]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a8a      	ldr	r2, [pc, #552]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b88      	ldr	r3, [pc, #544]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a87      	ldr	r2, [pc, #540]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0xb0>
 80033a8:	4b84      	ldr	r3, [pc, #528]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a83      	ldr	r2, [pc, #524]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b81      	ldr	r3, [pc, #516]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a80      	ldr	r2, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fd fba2 	bl	8000b10 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fd fb9e 	bl	8000b10 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1fb      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b76      	ldr	r3, [pc, #472]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0xc0>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fd fb8e 	bl	8000b10 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f8:	f7fd fb8a 	bl	8000b10 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e1e7      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0xe8>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d063      	beq.n	80034ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003426:	4b65      	ldr	r3, [pc, #404]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00b      	beq.n	800344a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003432:	4b62      	ldr	r3, [pc, #392]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343a:	2b08      	cmp	r3, #8
 800343c:	d11c      	bne.n	8003478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343e:	4b5f      	ldr	r3, [pc, #380]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d116      	bne.n	8003478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	4b5c      	ldr	r3, [pc, #368]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_RCC_OscConfig+0x152>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e1bb      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4952      	ldr	r1, [pc, #328]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	e03a      	b.n	80034ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003480:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <HAL_RCC_OscConfig+0x2b0>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fd fb43 	bl	8000b10 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348e:	f7fd fb3f 	bl	8000b10 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e19c      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4940      	ldr	r1, [pc, #256]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]
 80034c0:	e015      	b.n	80034ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c2:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <HAL_RCC_OscConfig+0x2b0>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fd fb22 	bl	8000b10 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d0:	f7fd fb1e 	bl	8000b10 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e17b      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d030      	beq.n	800355c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003502:	4b30      	ldr	r3, [pc, #192]	; (80035c4 <HAL_RCC_OscConfig+0x2b4>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fd fb02 	bl	8000b10 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003510:	f7fd fafe 	bl	8000b10 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e15b      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x200>
 800352e:	e015      	b.n	800355c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x2b4>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003536:	f7fd faeb 	bl	8000b10 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353e:	f7fd fae7 	bl	8000b10 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e144      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80a0 	beq.w	80036aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_RCC_OscConfig+0x2b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d121      	bne.n	80035ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_RCC_OscConfig+0x2b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <HAL_RCC_OscConfig+0x2b8>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fd faad 	bl	8000b10 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	e011      	b.n	80035de <HAL_RCC_OscConfig+0x2ce>
 80035ba:	bf00      	nop
 80035bc:	40023800 	.word	0x40023800
 80035c0:	42470000 	.word	0x42470000
 80035c4:	42470e80 	.word	0x42470e80
 80035c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035cc:	f7fd faa0 	bl	8000b10 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0fd      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b81      	ldr	r3, [pc, #516]	; (80037e4 <HAL_RCC_OscConfig+0x4d4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_OscConfig+0x2f0>
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	4a7c      	ldr	r2, [pc, #496]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6713      	str	r3, [r2, #112]	; 0x70
 80035fe:	e01c      	b.n	800363a <HAL_RCC_OscConfig+0x32a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b05      	cmp	r3, #5
 8003606:	d10c      	bne.n	8003622 <HAL_RCC_OscConfig+0x312>
 8003608:	4b77      	ldr	r3, [pc, #476]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a76      	ldr	r2, [pc, #472]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800360e:	f043 0304 	orr.w	r3, r3, #4
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	4b74      	ldr	r3, [pc, #464]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a73      	ldr	r2, [pc, #460]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	e00b      	b.n	800363a <HAL_RCC_OscConfig+0x32a>
 8003622:	4b71      	ldr	r3, [pc, #452]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a70      	ldr	r2, [pc, #448]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	; 0x70
 800362e:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a6d      	ldr	r2, [pc, #436]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d015      	beq.n	800366e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fd fa65 	bl	8000b10 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fd fa61 	bl	8000b10 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e0bc      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	4b61      	ldr	r3, [pc, #388]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0ee      	beq.n	800364a <HAL_RCC_OscConfig+0x33a>
 800366c:	e014      	b.n	8003698 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366e:	f7fd fa4f 	bl	8000b10 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003674:	e00a      	b.n	800368c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fd fa4b 	bl	8000b10 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f241 3288 	movw	r2, #5000	; 0x1388
 8003684:	4293      	cmp	r3, r2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e0a6      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368c:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ee      	bne.n	8003676 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003698:	7dfb      	ldrb	r3, [r7, #23]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d105      	bne.n	80036aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369e:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80036a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8092 	beq.w	80037d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036b4:	4b4c      	ldr	r3, [pc, #304]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d05c      	beq.n	800377a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d141      	bne.n	800374c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <HAL_RCC_OscConfig+0x4dc>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fd fa1f 	bl	8000b10 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fd fa1b 	bl	8000b10 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e078      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e8:	4b3f      	ldr	r3, [pc, #252]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f0      	bne.n	80036d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	019b      	lsls	r3, r3, #6
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	3b01      	subs	r3, #1
 800370e:	041b      	lsls	r3, r3, #16
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	4933      	ldr	r1, [pc, #204]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800371e:	4b33      	ldr	r3, [pc, #204]	; (80037ec <HAL_RCC_OscConfig+0x4dc>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fd f9f4 	bl	8000b10 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd f9f0 	bl	8000b10 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e04d      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x41c>
 800374a:	e045      	b.n	80037d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b27      	ldr	r3, [pc, #156]	; (80037ec <HAL_RCC_OscConfig+0x4dc>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fd f9dd 	bl	8000b10 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375a:	f7fd f9d9 	bl	8000b10 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e036      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376c:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x44a>
 8003778:	e02e      	b.n	80037d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e029      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	429a      	cmp	r2, r3
 8003798:	d11c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d115      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ae:	4013      	ands	r3, r2
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10d      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40007000 	.word	0x40007000
 80037e8:	40023800 	.word	0x40023800
 80037ec:	42470060 	.word	0x42470060

080037f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0cc      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b68      	ldr	r3, [pc, #416]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d90c      	bls.n	800382c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b8      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a58      	ldr	r2, [pc, #352]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4b53      	ldr	r3, [pc, #332]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a52      	ldr	r2, [pc, #328]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	494d      	ldr	r1, [pc, #308]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d044      	beq.n	8003910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d119      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e067      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ce:	4b37      	ldr	r3, [pc, #220]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4934      	ldr	r1, [pc, #208]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e0:	f7fd f916 	bl	8000b10 <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e8:	f7fd f912 	bl	8000b10 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e04f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 020c 	and.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	429a      	cmp	r2, r3
 800390e:	d1eb      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d20c      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e032      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4916      	ldr	r1, [pc, #88]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	490e      	ldr	r1, [pc, #56]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003976:	f000 f821 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800397a:	4601      	mov	r1, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	fa21 f303 	lsr.w	r3, r1, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd f876 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023c00 	.word	0x40023c00
 80039ac:	40023800 	.word	0x40023800
 80039b0:	08008010 	.word	0x08008010
 80039b4:	20000000 	.word	0x20000000
 80039b8:	20000004 	.word	0x20000004

080039bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	2300      	movs	r3, #0
 80039cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d2:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d007      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x32>
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d008      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x38>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 80b4 	bne.w	8003b50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039ea:	60bb      	str	r3, [r7, #8]
       break;
 80039ec:	e0b3      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ee:	4b5e      	ldr	r3, [pc, #376]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039f0:	60bb      	str	r3, [r7, #8]
      break;
 80039f2:	e0b0      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f4:	4b5a      	ldr	r3, [pc, #360]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fe:	4b58      	ldr	r3, [pc, #352]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d04a      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0a:	4b55      	ldr	r3, [pc, #340]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	f04f 0400 	mov.w	r4, #0
 8003a14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	ea03 0501 	and.w	r5, r3, r1
 8003a20:	ea04 0602 	and.w	r6, r4, r2
 8003a24:	4629      	mov	r1, r5
 8003a26:	4632      	mov	r2, r6
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	f04f 0400 	mov.w	r4, #0
 8003a30:	0154      	lsls	r4, r2, #5
 8003a32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a36:	014b      	lsls	r3, r1, #5
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	1b49      	subs	r1, r1, r5
 8003a3e:	eb62 0206 	sbc.w	r2, r2, r6
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	f04f 0400 	mov.w	r4, #0
 8003a4a:	0194      	lsls	r4, r2, #6
 8003a4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a50:	018b      	lsls	r3, r1, #6
 8003a52:	1a5b      	subs	r3, r3, r1
 8003a54:	eb64 0402 	sbc.w	r4, r4, r2
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	00e2      	lsls	r2, r4, #3
 8003a62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a66:	00d9      	lsls	r1, r3, #3
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	195b      	adds	r3, r3, r5
 8003a6e:	eb44 0406 	adc.w	r4, r4, r6
 8003a72:	f04f 0100 	mov.w	r1, #0
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	0262      	lsls	r2, r4, #9
 8003a7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a80:	0259      	lsls	r1, r3, #9
 8003a82:	460b      	mov	r3, r1
 8003a84:	4614      	mov	r4, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	4621      	mov	r1, r4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f04f 0400 	mov.w	r4, #0
 8003a90:	461a      	mov	r2, r3
 8003a92:	4623      	mov	r3, r4
 8003a94:	f7fc fbf4 	bl	8000280 <__aeabi_uldivmod>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e049      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	f04f 0400 	mov.w	r4, #0
 8003aaa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	ea03 0501 	and.w	r5, r3, r1
 8003ab6:	ea04 0602 	and.w	r6, r4, r2
 8003aba:	4629      	mov	r1, r5
 8003abc:	4632      	mov	r2, r6
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	f04f 0400 	mov.w	r4, #0
 8003ac6:	0154      	lsls	r4, r2, #5
 8003ac8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003acc:	014b      	lsls	r3, r1, #5
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	1b49      	subs	r1, r1, r5
 8003ad4:	eb62 0206 	sbc.w	r2, r2, r6
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	f04f 0400 	mov.w	r4, #0
 8003ae0:	0194      	lsls	r4, r2, #6
 8003ae2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ae6:	018b      	lsls	r3, r1, #6
 8003ae8:	1a5b      	subs	r3, r3, r1
 8003aea:	eb64 0402 	sbc.w	r4, r4, r2
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	00e2      	lsls	r2, r4, #3
 8003af8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003afc:	00d9      	lsls	r1, r3, #3
 8003afe:	460b      	mov	r3, r1
 8003b00:	4614      	mov	r4, r2
 8003b02:	195b      	adds	r3, r3, r5
 8003b04:	eb44 0406 	adc.w	r4, r4, r6
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	02a2      	lsls	r2, r4, #10
 8003b12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b16:	0299      	lsls	r1, r3, #10
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4614      	mov	r4, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	4621      	mov	r1, r4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f04f 0400 	mov.w	r4, #0
 8003b26:	461a      	mov	r2, r3
 8003b28:	4623      	mov	r3, r4
 8003b2a:	f7fc fba9 	bl	8000280 <__aeabi_uldivmod>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	60bb      	str	r3, [r7, #8]
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b52:	60bb      	str	r3, [r7, #8]
      break;
 8003b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b56:	68bb      	ldr	r3, [r7, #8]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b60:	40023800 	.word	0x40023800
 8003b64:	00f42400 	.word	0x00f42400
 8003b68:	007a1200 	.word	0x007a1200

08003b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000000 	.word	0x20000000

08003b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b88:	f7ff fff0 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003b8c:	4601      	mov	r1, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0a9b      	lsrs	r3, r3, #10
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4a03      	ldr	r2, [pc, #12]	; (8003ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08008020 	.word	0x08008020

08003bac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bac:	b084      	sub	sp, #16
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	f107 001c 	add.w	r0, r7, #28
 8003bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d122      	bne.n	8003c0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f001 fac6 	bl	8005190 <USB_CoreReset>
 8003c04:	4603      	mov	r3, r0
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e01a      	b.n	8003c40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f001 faba 	bl	8005190 <USB_CoreReset>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
 8003c32:	e005      	b.n	8003c40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d10b      	bne.n	8003c5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f043 0206 	orr.w	r2, r3, #6
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c6a:	b004      	add	sp, #16
 8003c6c:	4770      	bx	lr
	...

08003c70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d165      	bne.n	8003d50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4a41      	ldr	r2, [pc, #260]	; (8003d8c <USB_SetTurnaroundTime+0x11c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d906      	bls.n	8003c9a <USB_SetTurnaroundTime+0x2a>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <USB_SetTurnaroundTime+0x120>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d802      	bhi.n	8003c9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c94:	230f      	movs	r3, #15
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e062      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4a3c      	ldr	r2, [pc, #240]	; (8003d90 <USB_SetTurnaroundTime+0x120>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d906      	bls.n	8003cb0 <USB_SetTurnaroundTime+0x40>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4a3b      	ldr	r2, [pc, #236]	; (8003d94 <USB_SetTurnaroundTime+0x124>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d802      	bhi.n	8003cb0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003caa:	230e      	movs	r3, #14
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e057      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4a38      	ldr	r2, [pc, #224]	; (8003d94 <USB_SetTurnaroundTime+0x124>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d906      	bls.n	8003cc6 <USB_SetTurnaroundTime+0x56>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4a37      	ldr	r2, [pc, #220]	; (8003d98 <USB_SetTurnaroundTime+0x128>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d802      	bhi.n	8003cc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cc0:	230d      	movs	r3, #13
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e04c      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4a33      	ldr	r2, [pc, #204]	; (8003d98 <USB_SetTurnaroundTime+0x128>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d906      	bls.n	8003cdc <USB_SetTurnaroundTime+0x6c>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4a32      	ldr	r2, [pc, #200]	; (8003d9c <USB_SetTurnaroundTime+0x12c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d802      	bhi.n	8003cdc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e041      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <USB_SetTurnaroundTime+0x12c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d906      	bls.n	8003cf2 <USB_SetTurnaroundTime+0x82>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4a2e      	ldr	r2, [pc, #184]	; (8003da0 <USB_SetTurnaroundTime+0x130>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d802      	bhi.n	8003cf2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003cec:	230b      	movs	r3, #11
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e036      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4a2a      	ldr	r2, [pc, #168]	; (8003da0 <USB_SetTurnaroundTime+0x130>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d906      	bls.n	8003d08 <USB_SetTurnaroundTime+0x98>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <USB_SetTurnaroundTime+0x134>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d802      	bhi.n	8003d08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d02:	230a      	movs	r3, #10
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e02b      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <USB_SetTurnaroundTime+0x134>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d906      	bls.n	8003d1e <USB_SetTurnaroundTime+0xae>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <USB_SetTurnaroundTime+0x138>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d802      	bhi.n	8003d1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d18:	2309      	movs	r3, #9
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e020      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4a21      	ldr	r2, [pc, #132]	; (8003da8 <USB_SetTurnaroundTime+0x138>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d906      	bls.n	8003d34 <USB_SetTurnaroundTime+0xc4>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4a20      	ldr	r2, [pc, #128]	; (8003dac <USB_SetTurnaroundTime+0x13c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d802      	bhi.n	8003d34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d2e:	2308      	movs	r3, #8
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e015      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a1d      	ldr	r2, [pc, #116]	; (8003dac <USB_SetTurnaroundTime+0x13c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d906      	bls.n	8003d4a <USB_SetTurnaroundTime+0xda>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <USB_SetTurnaroundTime+0x140>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d802      	bhi.n	8003d4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d44:	2307      	movs	r3, #7
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e00a      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d4a:	2306      	movs	r3, #6
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e007      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d56:	2309      	movs	r3, #9
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e001      	b.n	8003d60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d5c:	2309      	movs	r3, #9
 8003d5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	029b      	lsls	r3, r3, #10
 8003d74:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	00d8acbf 	.word	0x00d8acbf
 8003d90:	00e4e1bf 	.word	0x00e4e1bf
 8003d94:	00f423ff 	.word	0x00f423ff
 8003d98:	0106737f 	.word	0x0106737f
 8003d9c:	011a499f 	.word	0x011a499f
 8003da0:	01312cff 	.word	0x01312cff
 8003da4:	014ca43f 	.word	0x014ca43f
 8003da8:	016e35ff 	.word	0x016e35ff
 8003dac:	01a6ab1f 	.word	0x01a6ab1f
 8003db0:	01e847ff 	.word	0x01e847ff

08003db4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f043 0201 	orr.w	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 0201 	bic.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d106      	bne.n	8003e24 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	e00b      	b.n	8003e3c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	e001      	b.n	8003e3c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e003      	b.n	8003e44 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003e3c:	2032      	movs	r0, #50	; 0x32
 8003e3e:	f7fc fe73 	bl	8000b28 <HAL_Delay>

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	e009      	b.n	8003e80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3340      	adds	r3, #64	; 0x40
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	2200      	movs	r2, #0
 8003e78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b0e      	cmp	r3, #14
 8003e84:	d9f2      	bls.n	8003e6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d11c      	bne.n	8003ec6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec4:	e00b      	b.n	8003ede <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef8:	461a      	mov	r2, r3
 8003efa:	680b      	ldr	r3, [r1, #0]
 8003efc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d10c      	bne.n	8003f1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f949 	bl	80041a4 <USB_SetDevSpeed>
 8003f12:	e008      	b.n	8003f26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f14:	2101      	movs	r1, #1
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f944 	bl	80041a4 <USB_SetDevSpeed>
 8003f1c:	e003      	b.n	8003f26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f1e:	2103      	movs	r1, #3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f93f 	bl	80041a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f26:	2110      	movs	r1, #16
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f8f3 	bl	8004114 <USB_FlushTxFifo>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f911 	bl	8004160 <USB_FlushRxFifo>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2300      	movs	r3, #0
 8003f52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f66:	461a      	mov	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	e043      	b.n	8003ffa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f88:	d118      	bne.n	8003fbc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e013      	b.n	8003fce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	e008      	b.n	8003fce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fec:	461a      	mov	r2, r3
 8003fee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d3b7      	bcc.n	8003f72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	e043      	b.n	8004090 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800401a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800401e:	d118      	bne.n	8004052 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004032:	461a      	mov	r2, r3
 8004034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e013      	b.n	8004064 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004048:	461a      	mov	r2, r3
 800404a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e008      	b.n	8004064 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	461a      	mov	r2, r3
 8004060:	2300      	movs	r3, #0
 8004062:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	461a      	mov	r2, r3
 8004072:	2300      	movs	r3, #0
 8004074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004082:	461a      	mov	r2, r3
 8004084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004088:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	3301      	adds	r3, #1
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	429a      	cmp	r2, r3
 8004096:	d3b7      	bcc.n	8004008 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f043 0210 	orr.w	r2, r3, #16
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <USB_DevInit+0x2c4>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80040d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f043 0208 	orr.w	r2, r3, #8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80040ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004100:	7dfb      	ldrb	r3, [r7, #23]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800410c:	b004      	add	sp, #16
 800410e:	4770      	bx	lr
 8004110:	803c3800 	.word	0x803c3800

08004114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a09      	ldr	r2, [pc, #36]	; (800415c <USB_FlushTxFifo+0x48>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d901      	bls.n	8004140 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e006      	b.n	800414e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b20      	cmp	r3, #32
 800414a:	d0f0      	beq.n	800412e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	00030d40 	.word	0x00030d40

08004160 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2210      	movs	r2, #16
 8004170:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <USB_FlushRxFifo+0x40>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d901      	bls.n	8004184 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e006      	b.n	8004192 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b10      	cmp	r3, #16
 800418e:	d0f0      	beq.n	8004172 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	00030d40 	.word	0x00030d40

080041a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c4:	4313      	orrs	r3, r2
 80041c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b087      	sub	sp, #28
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0306 	and.w	r3, r3, #6
 80041ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80041f6:	2300      	movs	r3, #0
 80041f8:	75fb      	strb	r3, [r7, #23]
 80041fa:	e00a      	b.n	8004212 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d002      	beq.n	8004208 <USB_GetDevSpeed+0x32>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b06      	cmp	r3, #6
 8004206:	d102      	bne.n	800420e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004208:	2302      	movs	r3, #2
 800420a:	75fb      	strb	r3, [r7, #23]
 800420c:	e001      	b.n	8004212 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800420e:	230f      	movs	r3, #15
 8004210:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004212:	7dfb      	ldrb	r3, [r7, #23]
}
 8004214:	4618      	mov	r0, r3
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d13a      	bne.n	80042b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	b29b      	uxth	r3, r3
 8004254:	68f9      	ldr	r1, [r7, #12]
 8004256:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800425a:	4313      	orrs	r3, r2
 800425c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d155      	bne.n	8004320 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	78db      	ldrb	r3, [r3, #3]
 800428e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004290:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	059b      	lsls	r3, r3, #22
 8004296:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004298:	4313      	orrs	r3, r2
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e036      	b.n	8004320 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d11a      	bne.n	8004320 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	78db      	ldrb	r3, [r3, #3]
 8004304:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004306:	430b      	orrs	r3, r1
 8004308:	4313      	orrs	r3, r2
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d161      	bne.n	8004410 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004362:	d11f      	bne.n	80043a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	440a      	add	r2, r1
 800437a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004382:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	0151      	lsls	r1, r2, #5
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	440a      	add	r2, r1
 800439a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	2101      	movs	r1, #1
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	68f9      	ldr	r1, [r7, #12]
 80043c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043c4:	4013      	ands	r3, r2
 80043c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	69da      	ldr	r2, [r3, #28]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	2101      	movs	r1, #1
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	b29b      	uxth	r3, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e8:	4013      	ands	r3, r2
 80043ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	0159      	lsls	r1, r3, #5
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	440b      	add	r3, r1
 8004402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004406:	4619      	mov	r1, r3
 8004408:	4b35      	ldr	r3, [pc, #212]	; (80044e0 <USB_DeactivateEndpoint+0x1b0>)
 800440a:	4013      	ands	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
 800440e:	e060      	b.n	80044d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004426:	d11f      	bne.n	8004468 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	440a      	add	r2, r1
 800443e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004446:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004466:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	2101      	movs	r1, #1
 800447a:	fa01 f303 	lsl.w	r3, r1, r3
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	43db      	mvns	r3, r3
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004488:	4013      	ands	r3, r2
 800448a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	43db      	mvns	r3, r3
 80044a6:	68f9      	ldr	r1, [r7, #12]
 80044a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ac:	4013      	ands	r3, r2
 80044ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	0159      	lsls	r1, r3, #5
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	440b      	add	r3, r1
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	4619      	mov	r1, r3
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <USB_DeactivateEndpoint+0x1b4>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	ec337800 	.word	0xec337800
 80044e4:	eff37800 	.word	0xeff37800

080044e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	2b01      	cmp	r3, #1
 8004506:	f040 815c 	bne.w	80047c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d132      	bne.n	8004578 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	0151      	lsls	r1, r2, #5
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	440a      	add	r2, r1
 8004528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004530:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004534:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004554:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004570:	0cdb      	lsrs	r3, r3, #19
 8004572:	04db      	lsls	r3, r3, #19
 8004574:	6113      	str	r3, [r2, #16]
 8004576:	e074      	b.n	8004662 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	0151      	lsls	r1, r2, #5
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	440a      	add	r2, r1
 800458e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004592:	0cdb      	lsrs	r3, r3, #19
 8004594:	04db      	lsls	r3, r3, #19
 8004596:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6959      	ldr	r1, [r3, #20]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	440b      	add	r3, r1
 80045d4:	1e59      	subs	r1, r3, #1
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	fbb1 f3f3 	udiv	r3, r1, r3
 80045de:	04d9      	lsls	r1, r3, #19
 80045e0:	4b9d      	ldr	r3, [pc, #628]	; (8004858 <USB_EPStartXfer+0x370>)
 80045e2:	400b      	ands	r3, r1
 80045e4:	69b9      	ldr	r1, [r7, #24]
 80045e6:	0148      	lsls	r0, r1, #5
 80045e8:	69f9      	ldr	r1, [r7, #28]
 80045ea:	4401      	add	r1, r0
 80045ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045f0:	4313      	orrs	r3, r2
 80045f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460a:	69b9      	ldr	r1, [r7, #24]
 800460c:	0148      	lsls	r0, r1, #5
 800460e:	69f9      	ldr	r1, [r7, #28]
 8004610:	4401      	add	r1, r0
 8004612:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004616:	4313      	orrs	r3, r2
 8004618:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	78db      	ldrb	r3, [r3, #3]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d11f      	bne.n	8004662 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	440a      	add	r2, r1
 8004638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004640:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800465c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004660:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d14b      	bne.n	8004700 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467c:	461a      	mov	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	78db      	ldrb	r3, [r3, #3]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d128      	bne.n	80046de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d110      	bne.n	80046be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e00f      	b.n	80046de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	0151      	lsls	r1, r2, #5
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	440a      	add	r2, r1
 80046d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e12f      	b.n	8004960 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	0151      	lsls	r1, r2, #5
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	440a      	add	r2, r1
 8004716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800471e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	78db      	ldrb	r3, [r3, #3]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d015      	beq.n	8004754 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8117 	beq.w	8004960 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	2101      	movs	r1, #1
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	69f9      	ldr	r1, [r7, #28]
 800474a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800474e:	4313      	orrs	r3, r2
 8004750:	634b      	str	r3, [r1, #52]	; 0x34
 8004752:	e105      	b.n	8004960 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d110      	bne.n	8004786 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	0151      	lsls	r1, r2, #5
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	440a      	add	r2, r1
 800477a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	e00f      	b.n	80047a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	0151      	lsls	r1, r2, #5
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	440a      	add	r2, r1
 800479c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	68d9      	ldr	r1, [r3, #12]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	b298      	uxth	r0, r3
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	4603      	mov	r3, r0
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fa2b 	bl	8004c16 <USB_WritePacket>
 80047c0:	e0ce      	b.n	8004960 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047dc:	0cdb      	lsrs	r3, r3, #19
 80047de:	04db      	lsls	r3, r3, #19
 80047e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004800:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004804:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d126      	bne.n	800485c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	0148      	lsls	r0, r1, #5
 8004828:	69f9      	ldr	r1, [r7, #28]
 800482a:	4401      	add	r1, r0
 800482c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004830:	4313      	orrs	r3, r2
 8004832:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004852:	6113      	str	r3, [r2, #16]
 8004854:	e036      	b.n	80048c4 <USB_EPStartXfer+0x3dc>
 8004856:	bf00      	nop
 8004858:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	695a      	ldr	r2, [r3, #20]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4413      	add	r3, r2
 8004866:	1e5a      	subs	r2, r3, #1
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	8afb      	ldrh	r3, [r7, #22]
 8004882:	04d9      	lsls	r1, r3, #19
 8004884:	4b39      	ldr	r3, [pc, #228]	; (800496c <USB_EPStartXfer+0x484>)
 8004886:	400b      	ands	r3, r1
 8004888:	69b9      	ldr	r1, [r7, #24]
 800488a:	0148      	lsls	r0, r1, #5
 800488c:	69f9      	ldr	r1, [r7, #28]
 800488e:	4401      	add	r1, r0
 8004890:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004894:	4313      	orrs	r3, r2
 8004896:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	8af9      	ldrh	r1, [r7, #22]
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	0148      	lsls	r0, r1, #5
 80048b8:	69f9      	ldr	r1, [r7, #28]
 80048ba:	4401      	add	r1, r0
 80048bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048c0:	4313      	orrs	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10d      	bne.n	80048e6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	460a      	mov	r2, r1
 80048e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	78db      	ldrb	r3, [r3, #3]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d128      	bne.n	8004940 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d110      	bne.n	8004920 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	0151      	lsls	r1, r2, #5
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	440a      	add	r2, r1
 8004914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004918:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e00f      	b.n	8004940 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800495a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800495e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	1ff80000 	.word	0x1ff80000

08004970 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	785b      	ldrb	r3, [r3, #1]
 800498c:	2b01      	cmp	r3, #1
 800498e:	f040 80cd 	bne.w	8004b2c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d132      	bne.n	8004a00 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f8:	0cdb      	lsrs	r3, r3, #19
 80049fa:	04db      	lsls	r3, r3, #19
 80049fc:	6113      	str	r3, [r2, #16]
 80049fe:	e04e      	b.n	8004a9e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1a:	0cdb      	lsrs	r3, r3, #19
 8004a1c:	04db      	lsls	r3, r3, #19
 8004a1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	0151      	lsls	r1, r2, #5
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	440a      	add	r2, r1
 8004a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a42:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d903      	bls.n	8004a58 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8e:	6939      	ldr	r1, [r7, #16]
 8004a90:	0148      	lsls	r0, r1, #5
 8004a92:	6979      	ldr	r1, [r7, #20]
 8004a94:	4401      	add	r1, r0
 8004a96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d11e      	bne.n	8004ae2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d009      	beq.n	8004ac0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	461a      	mov	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	0151      	lsls	r1, r2, #5
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	440a      	add	r2, r1
 8004ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ada:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	e092      	b.n	8004c08 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d07e      	beq.n	8004c08 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	6979      	ldr	r1, [r7, #20]
 8004b22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b26:	4313      	orrs	r3, r2
 8004b28:	634b      	str	r3, [r1, #52]	; 0x34
 8004b2a:	e06d      	b.n	8004c08 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b46:	0cdb      	lsrs	r3, r3, #19
 8004b48:	04db      	lsls	r3, r3, #19
 8004b4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b6e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb6:	6939      	ldr	r1, [r7, #16]
 8004bb8:	0148      	lsls	r0, r1, #5
 8004bba:	6979      	ldr	r1, [r7, #20]
 8004bbc:	4401      	add	r1, r0
 8004bbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d10d      	bne.n	8004be8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	68d9      	ldr	r1, [r3, #12]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be4:	460a      	mov	r2, r1
 8004be6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b089      	sub	sp, #36	; 0x24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	4611      	mov	r1, r2
 8004c22:	461a      	mov	r2, r3
 8004c24:	460b      	mov	r3, r1
 8004c26:	71fb      	strb	r3, [r7, #7]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004c34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d11a      	bne.n	8004c72 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c3c:	88bb      	ldrh	r3, [r7, #4]
 8004c3e:	3303      	adds	r3, #3
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c44:	2300      	movs	r3, #0
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	e00f      	b.n	8004c6a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	031a      	lsls	r2, r3, #12
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c56:	461a      	mov	r2, r3
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3304      	adds	r3, #4
 8004c62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	3301      	adds	r3, #1
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d3eb      	bcc.n	8004c4a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3724      	adds	r7, #36	; 0x24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	; 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	3303      	adds	r3, #3
 8004c9a:	089b      	lsrs	r3, r3, #2
 8004c9c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e00b      	b.n	8004cbc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d3ef      	bcc.n	8004ca4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004cc4:	69fb      	ldr	r3, [r7, #28]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3724      	adds	r7, #36	; 0x24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d12c      	bne.n	8004d48 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	db12      	blt.n	8004d26 <USB_EPSetStall+0x54>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00f      	beq.n	8004d26 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d24:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e02b      	b.n	8004da0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	db12      	blt.n	8004d80 <USB_EPSetStall+0xae>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00f      	beq.n	8004d80 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d7e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d128      	bne.n	8004e1c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004de8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	78db      	ldrb	r3, [r3, #3]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d003      	beq.n	8004dfa <USB_EPClearStall+0x4c>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	78db      	ldrb	r3, [r3, #3]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d138      	bne.n	8004e6c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e027      	b.n	8004e6c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	78db      	ldrb	r3, [r3, #3]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d003      	beq.n	8004e4c <USB_EPClearStall+0x9e>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	78db      	ldrb	r3, [r3, #3]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d10f      	bne.n	8004e6c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e98:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e9c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004eae:	68f9      	ldr	r1, [r7, #12]
 8004eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ee0:	f023 0303 	bic.w	r3, r3, #3
 8004ee4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef4:	f023 0302 	bic.w	r3, r3, #2
 8004ef8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f22:	f023 0303 	bic.w	r3, r3, #3
 8004f26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f36:	f043 0302 	orr.w	r3, r3, #2
 8004f3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	0c1b      	lsrs	r3, r3, #16
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	b29b      	uxth	r3, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005006:	68bb      	ldr	r3, [r7, #8]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
 8005044:	01db      	lsls	r3, r3, #7
 8005046:	b2db      	uxtb	r3, r3
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005062:	68bb      	ldr	r3, [r7, #8]
}
 8005064:	4618      	mov	r0, r3
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0301 	and.w	r3, r3, #1
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050aa:	f023 0307 	bic.w	r3, r3, #7
 80050ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	460b      	mov	r3, r1
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	333c      	adds	r3, #60	; 0x3c
 80050ea:	3304      	adds	r3, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4a26      	ldr	r2, [pc, #152]	; (800518c <USB_EP0_OutStart+0xb8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d90a      	bls.n	800510e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005108:	d101      	bne.n	800510e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e037      	b.n	800517e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005128:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800512c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513c:	f043 0318 	orr.w	r3, r3, #24
 8005140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005150:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005154:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d10f      	bne.n	800517c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800517a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	4f54300a 	.word	0x4f54300a

08005190 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3301      	adds	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <USB_CoreReset+0x64>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e01b      	b.n	80051e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	daf2      	bge.n	800519c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f043 0201 	orr.w	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a09      	ldr	r2, [pc, #36]	; (80051f4 <USB_CoreReset+0x64>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e006      	b.n	80051e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d0f0      	beq.n	80051c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	00030d40 	.word	0x00030d40

080051f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005204:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005208:	f002 faac 	bl	8007764 <malloc>
 800520c:	4603      	mov	r3, r0
 800520e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d105      	bne.n	8005222 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800521e:	2302      	movs	r3, #2
 8005220:	e066      	b.n	80052f0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	7c1b      	ldrb	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d119      	bne.n	8005266 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005236:	2202      	movs	r2, #2
 8005238:	2181      	movs	r1, #129	; 0x81
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f002 f919 	bl	8007472 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800524a:	2202      	movs	r2, #2
 800524c:	2101      	movs	r1, #1
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f002 f90f 	bl	8007472 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2210      	movs	r2, #16
 8005260:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005264:	e016      	b.n	8005294 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005266:	2340      	movs	r3, #64	; 0x40
 8005268:	2202      	movs	r2, #2
 800526a:	2181      	movs	r1, #129	; 0x81
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f002 f900 	bl	8007472 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005278:	2340      	movs	r3, #64	; 0x40
 800527a:	2202      	movs	r2, #2
 800527c:	2101      	movs	r1, #1
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f002 f8f7 	bl	8007472 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2210      	movs	r2, #16
 8005290:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005294:	2308      	movs	r3, #8
 8005296:	2203      	movs	r2, #3
 8005298:	2182      	movs	r1, #130	; 0x82
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f002 f8e9 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	7c1b      	ldrb	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052d4:	2101      	movs	r1, #1
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f002 f9ba 	bl	8007650 <USBD_LL_PrepareReceive>
 80052dc:	e007      	b.n	80052ee <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052e4:	2340      	movs	r3, #64	; 0x40
 80052e6:	2101      	movs	r1, #1
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f002 f9b1 	bl	8007650 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005308:	2181      	movs	r1, #129	; 0x81
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f002 f8d7 	bl	80074be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005316:	2101      	movs	r1, #1
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f002 f8d0 	bl	80074be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005326:	2182      	movs	r1, #130	; 0x82
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f002 f8c8 	bl	80074be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005358:	4618      	mov	r0, r3
 800535a:	f002 fa0b 	bl	8007774 <free>
    pdev->pClassData = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005380:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005396:	2b00      	cmp	r3, #0
 8005398:	d03a      	beq.n	8005410 <USBD_CDC_Setup+0xa0>
 800539a:	2b20      	cmp	r3, #32
 800539c:	f040 8097 	bne.w	80054ce <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	88db      	ldrh	r3, [r3, #6]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d029      	beq.n	80053fc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	b25b      	sxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da11      	bge.n	80053d6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80053be:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	88d2      	ldrh	r2, [r2, #6]
 80053c4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80053c6:	6939      	ldr	r1, [r7, #16]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	88db      	ldrh	r3, [r3, #6]
 80053cc:	461a      	mov	r2, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 fa9d 	bl	800690e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80053d4:	e082      	b.n	80054dc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	785a      	ldrb	r2, [r3, #1]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	88db      	ldrh	r3, [r3, #6]
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80053ec:	6939      	ldr	r1, [r7, #16]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	88db      	ldrh	r3, [r3, #6]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 fab6 	bl	8006966 <USBD_CtlPrepareRx>
    break;
 80053fa:	e06f      	b.n	80054dc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	7850      	ldrb	r0, [r2, #1]
 8005408:	2200      	movs	r2, #0
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	4798      	blx	r3
    break;
 800540e:	e065      	b.n	80054dc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b0b      	cmp	r3, #11
 8005416:	d84f      	bhi.n	80054b8 <USBD_CDC_Setup+0x148>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <USBD_CDC_Setup+0xb0>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005451 	.word	0x08005451
 8005424:	080054c7 	.word	0x080054c7
 8005428:	080054b9 	.word	0x080054b9
 800542c:	080054b9 	.word	0x080054b9
 8005430:	080054b9 	.word	0x080054b9
 8005434:	080054b9 	.word	0x080054b9
 8005438:	080054b9 	.word	0x080054b9
 800543c:	080054b9 	.word	0x080054b9
 8005440:	080054b9 	.word	0x080054b9
 8005444:	080054b9 	.word	0x080054b9
 8005448:	08005479 	.word	0x08005479
 800544c:	080054a1 	.word	0x080054a1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005456:	2b03      	cmp	r3, #3
 8005458:	d107      	bne.n	800546a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800545a:	f107 030c 	add.w	r3, r7, #12
 800545e:	2202      	movs	r2, #2
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 fa53 	bl	800690e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005468:	e030      	b.n	80054cc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 f9dd 	bl	800682c <USBD_CtlError>
        ret = USBD_FAIL;
 8005472:	2303      	movs	r3, #3
 8005474:	75fb      	strb	r3, [r7, #23]
      break;
 8005476:	e029      	b.n	80054cc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800547e:	2b03      	cmp	r3, #3
 8005480:	d107      	bne.n	8005492 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005482:	f107 030f 	add.w	r3, r7, #15
 8005486:	2201      	movs	r2, #1
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 fa3f 	bl	800690e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005490:	e01c      	b.n	80054cc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 f9c9 	bl	800682c <USBD_CtlError>
        ret = USBD_FAIL;
 800549a:	2303      	movs	r3, #3
 800549c:	75fb      	strb	r3, [r7, #23]
      break;
 800549e:	e015      	b.n	80054cc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d00f      	beq.n	80054ca <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 f9bd 	bl	800682c <USBD_CtlError>
        ret = USBD_FAIL;
 80054b2:	2303      	movs	r3, #3
 80054b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80054b6:	e008      	b.n	80054ca <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f001 f9b6 	bl	800682c <USBD_CtlError>
      ret = USBD_FAIL;
 80054c0:	2303      	movs	r3, #3
 80054c2:	75fb      	strb	r3, [r7, #23]
      break;
 80054c4:	e002      	b.n	80054cc <USBD_CDC_Setup+0x15c>
      break;
 80054c6:	bf00      	nop
 80054c8:	e008      	b.n	80054dc <USBD_CDC_Setup+0x16c>
      break;
 80054ca:	bf00      	nop
    }
    break;
 80054cc:	e006      	b.n	80054dc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 f9ab 	bl	800682c <USBD_CtlError>
    ret = USBD_FAIL;
 80054d6:	2303      	movs	r3, #3
 80054d8:	75fb      	strb	r3, [r7, #23]
    break;
 80054da:	bf00      	nop
  }

  return (uint8_t)ret;
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop

080054e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80054fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005506:	2303      	movs	r3, #3
 8005508:	e049      	b.n	800559e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005510:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	3318      	adds	r3, #24
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d029      	beq.n	800557c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	3318      	adds	r3, #24
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	78f9      	ldrb	r1, [r7, #3]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	460b      	mov	r3, r1
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	1a5b      	subs	r3, r3, r1
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4403      	add	r3, r0
 8005548:	3344      	adds	r3, #68	; 0x44
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005550:	fb03 f301 	mul.w	r3, r3, r1
 8005554:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005556:	2b00      	cmp	r3, #0
 8005558:	d110      	bne.n	800557c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	3318      	adds	r3, #24
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800556e:	78f9      	ldrb	r1, [r7, #3]
 8005570:	2300      	movs	r3, #0
 8005572:	2200      	movs	r2, #0
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f002 f84a 	bl	800760e <USBD_LL_Transmit>
 800557a:	e00f      	b.n	800559c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2200      	movs	r2, #0
 8005580:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005598:	78fa      	ldrb	r2, [r7, #3]
 800559a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	460b      	mov	r3, r1
 80055b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e015      	b.n	80055f4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f002 f860 	bl	8007692 <USBD_LL_GetRxDataSize>
 80055d2:	4602      	mov	r2, r0
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80055ee:	4611      	mov	r1, r2
 80055f0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800560a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d015      	beq.n	8005642 <USBD_CDC_EP0_RxReady+0x46>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800561c:	2bff      	cmp	r3, #255	; 0xff
 800561e:	d010      	beq.n	8005642 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800562e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005636:	b292      	uxth	r2, r2
 8005638:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	22ff      	movs	r2, #255	; 0xff
 800563e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2243      	movs	r2, #67	; 0x43
 8005658:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800565a:	4b03      	ldr	r3, [pc, #12]	; (8005668 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20000094 	.word	0x20000094

0800566c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2243      	movs	r2, #67	; 0x43
 8005678:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800567a:	4b03      	ldr	r3, [pc, #12]	; (8005688 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800567c:	4618      	mov	r0, r3
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20000050 	.word	0x20000050

0800568c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2243      	movs	r2, #67	; 0x43
 8005698:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800569a:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	200000d8 	.word	0x200000d8

080056ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	220a      	movs	r2, #10
 80056b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80056ba:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	2000000c 	.word	0x2000000c

080056cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80056dc:	2303      	movs	r3, #3
 80056de:	e004      	b.n	80056ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b087      	sub	sp, #28
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005708:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005738:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800575e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800576e:	2303      	movs	r3, #3
 8005770:	e01a      	b.n	80057a8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005778:	2b00      	cmp	r3, #0
 800577a:	d114      	bne.n	80057a6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2201      	movs	r2, #1
 8005780:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800579a:	2181      	movs	r1, #129	; 0x81
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 ff36 	bl	800760e <USBD_LL_Transmit>

    ret = USBD_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e016      	b.n	80057fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	7c1b      	ldrb	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d109      	bne.n	80057ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e0:	2101      	movs	r1, #1
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f001 ff34 	bl	8007650 <USBD_LL_PrepareReceive>
 80057e8:	e007      	b.n	80057fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057f0:	2340      	movs	r3, #64	; 0x40
 80057f2:	2101      	movs	r1, #1
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 ff2b 	bl	8007650 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005818:	2303      	movs	r3, #3
 800581a:	e025      	b.n	8005868 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	79fa      	ldrb	r2, [r7, #7]
 800585a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f001 fda1 	bl	80073a4 <USBD_LL_Init>
 8005862:	4603      	mov	r3, r0
 8005864:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005884:	2303      	movs	r3, #3
 8005886:	e010      	b.n	80058aa <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f107 020e 	add.w	r2, r7, #14
 800589c:	4610      	mov	r0, r2
 800589e:	4798      	blx	r3
 80058a0:	4602      	mov	r2, r0
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f001 fdbe 	bl	800743c <USBD_LL_Start>
 80058c0:	4603      	mov	r3, r0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80058ec:	2303      	movs	r3, #3
 80058ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	78fa      	ldrb	r2, [r7, #3]
 8005904:	4611      	mov	r1, r2
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
 800590a:	4603      	mov	r3, r0
 800590c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	4611      	mov	r1, r2
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
  }

  return USBD_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 ff2c 	bl	80067b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800596e:	461a      	mov	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	2b01      	cmp	r3, #1
 8005982:	d00e      	beq.n	80059a2 <USBD_LL_SetupStage+0x5a>
 8005984:	2b01      	cmp	r3, #1
 8005986:	d302      	bcc.n	800598e <USBD_LL_SetupStage+0x46>
 8005988:	2b02      	cmp	r3, #2
 800598a:	d014      	beq.n	80059b6 <USBD_LL_SetupStage+0x6e>
 800598c:	e01d      	b.n	80059ca <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa18 	bl	8005dcc <USBD_StdDevReq>
 800599c:	4603      	mov	r3, r0
 800599e:	73fb      	strb	r3, [r7, #15]
      break;
 80059a0:	e020      	b.n	80059e4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa7c 	bl	8005ea8 <USBD_StdItfReq>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]
      break;
 80059b4:	e016      	b.n	80059e4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fab8 	bl	8005f34 <USBD_StdEPReq>
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]
      break;
 80059c8:	e00c      	b.n	80059e4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 fd8f 	bl	80074fc <USBD_LL_StallEP>
 80059de:	4603      	mov	r3, r0
 80059e0:	73fb      	strb	r3, [r7, #15]
      break;
 80059e2:	bf00      	nop
  }

  return ret;
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b086      	sub	sp, #24
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	460b      	mov	r3, r1
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80059fc:	7afb      	ldrb	r3, [r7, #11]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d137      	bne.n	8005a72 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d14a      	bne.n	8005aaa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d913      	bls.n	8005a48 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	1ad2      	subs	r2, r2, r3
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4293      	cmp	r3, r2
 8005a38:	bf28      	it	cs
 8005a3a:	4613      	movcs	r3, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 ffad 	bl	80069a0 <USBD_CtlContinueRx>
 8005a46:	e030      	b.n	8005aaa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d105      	bne.n	8005a6a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 ffa9 	bl	80069c2 <USBD_CtlSendStatus>
 8005a70:	e01b      	b.n	8005aaa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d013      	beq.n	8005aa6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d10e      	bne.n	8005aa6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	7afa      	ldrb	r2, [r7, #11]
 8005a92:	4611      	mov	r1, r2
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	4798      	blx	r3
 8005a98:	4603      	mov	r3, r0
 8005a9a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	e002      	b.n	8005aac <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e000      	b.n	8005aac <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	460b      	mov	r3, r1
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ac2:	7afb      	ldrb	r3, [r7, #11]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d16a      	bne.n	8005b9e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3314      	adds	r3, #20
 8005acc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d155      	bne.n	8005b84 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d914      	bls.n	8005b0e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	1ad2      	subs	r2, r2, r3
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	461a      	mov	r2, r3
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 ff22 	bl	8006944 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b00:	2300      	movs	r3, #0
 8005b02:	2200      	movs	r2, #0
 8005b04:	2100      	movs	r1, #0
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f001 fda2 	bl	8007650 <USBD_LL_PrepareReceive>
 8005b0c:	e03a      	b.n	8005b84 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d11c      	bne.n	8005b54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d316      	bcc.n	8005b54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d20f      	bcs.n	8005b54 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b34:	2200      	movs	r2, #0
 8005b36:	2100      	movs	r1, #0
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 ff03 	bl	8006944 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b46:	2300      	movs	r3, #0
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f001 fd7f 	bl	8007650 <USBD_LL_PrepareReceive>
 8005b52:	e017      	b.n	8005b84 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d105      	bne.n	8005b76 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b76:	2180      	movs	r1, #128	; 0x80
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f001 fcbf 	bl	80074fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 ff32 	bl	80069e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d123      	bne.n	8005bd6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff fe9b 	bl	80058ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b9c:	e01b      	b.n	8005bd6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d013      	beq.n	8005bd2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d10e      	bne.n	8005bd2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	7afa      	ldrb	r2, [r7, #11]
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	4798      	blx	r3
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	e002      	b.n	8005bd8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e000      	b.n	8005bd8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6852      	ldr	r2, [r2, #4]
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	4611      	mov	r1, r2
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c24:	2340      	movs	r3, #64	; 0x40
 8005c26:	2200      	movs	r2, #0
 8005c28:	2100      	movs	r1, #0
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 fc21 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2240      	movs	r2, #64	; 0x40
 8005c3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c40:	2340      	movs	r3, #64	; 0x40
 8005c42:	2200      	movs	r2, #0
 8005c44:	2180      	movs	r1, #128	; 0x80
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 fc13 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2240      	movs	r2, #64	; 0x40
 8005c56:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	78fa      	ldrb	r2, [r7, #3]
 8005c72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d105      	bne.n	8005cca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d10b      	bne.n	8005d02 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d005      	beq.n	8005d02 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6852      	ldr	r2, [r2, #4]
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	4611      	mov	r1, r2
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
  }

  return USBD_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b087      	sub	sp, #28
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	3301      	adds	r3, #1
 8005da4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005dac:	8a3b      	ldrh	r3, [r7, #16]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	b21a      	sxth	r2, r3
 8005db2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b21b      	sxth	r3, r3
 8005dba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005dbc:	89fb      	ldrh	r3, [r7, #14]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d004      	beq.n	8005df0 <USBD_StdDevReq+0x24>
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d002      	beq.n	8005df0 <USBD_StdDevReq+0x24>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <USBD_StdDevReq+0x38>
 8005dee:	e050      	b.n	8005e92 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	73fb      	strb	r3, [r7, #15]
    break;
 8005e02:	e04b      	b.n	8005e9c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	785b      	ldrb	r3, [r3, #1]
 8005e08:	2b09      	cmp	r3, #9
 8005e0a:	d83c      	bhi.n	8005e86 <USBD_StdDevReq+0xba>
 8005e0c:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <USBD_StdDevReq+0x48>)
 8005e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e12:	bf00      	nop
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005e7d 	.word	0x08005e7d
 8005e1c:	08005e87 	.word	0x08005e87
 8005e20:	08005e73 	.word	0x08005e73
 8005e24:	08005e87 	.word	0x08005e87
 8005e28:	08005e47 	.word	0x08005e47
 8005e2c:	08005e3d 	.word	0x08005e3d
 8005e30:	08005e87 	.word	0x08005e87
 8005e34:	08005e5f 	.word	0x08005e5f
 8005e38:	08005e51 	.word	0x08005e51
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f9ce 	bl	80061e0 <USBD_GetDescriptor>
      break;
 8005e44:	e024      	b.n	8005e90 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fb33 	bl	80064b4 <USBD_SetAddress>
      break;
 8005e4e:	e01f      	b.n	8005e90 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fb70 	bl	8006538 <USBD_SetConfig>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5c:	e018      	b.n	8005e90 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fc0d 	bl	8006680 <USBD_GetConfig>
      break;
 8005e66:	e013      	b.n	8005e90 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fc3c 	bl	80066e8 <USBD_GetStatus>
      break;
 8005e70:	e00e      	b.n	8005e90 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fc6a 	bl	800674e <USBD_SetFeature>
      break;
 8005e7a:	e009      	b.n	8005e90 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fc79 	bl	8006776 <USBD_ClrFeature>
      break;
 8005e84:	e004      	b.n	8005e90 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fccf 	bl	800682c <USBD_CtlError>
      break;
 8005e8e:	bf00      	nop
    }
    break;
 8005e90:	e004      	b.n	8005e9c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fcc9 	bl	800682c <USBD_CtlError>
    break;
 8005e9a:	bf00      	nop
  }

  return ret;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop

08005ea8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d003      	beq.n	8005eca <USBD_StdItfReq+0x22>
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d001      	beq.n	8005eca <USBD_StdItfReq+0x22>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d12a      	bne.n	8005f20 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d81d      	bhi.n	8005f12 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	889b      	ldrh	r3, [r3, #4]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d813      	bhi.n	8005f08 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	88db      	ldrh	r3, [r3, #6]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d110      	bne.n	8005f1c <USBD_StdItfReq+0x74>
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10d      	bne.n	8005f1c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fd5e 	bl	80069c2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005f06:	e009      	b.n	8005f1c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fc8e 	bl	800682c <USBD_CtlError>
      break;
 8005f10:	e004      	b.n	8005f1c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fc89 	bl	800682c <USBD_CtlError>
      break;
 8005f1a:	e000      	b.n	8005f1e <USBD_StdItfReq+0x76>
      break;
 8005f1c:	bf00      	nop
    }
    break;
 8005f1e:	e004      	b.n	8005f2a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fc82 	bl	800682c <USBD_CtlError>
    break;
 8005f28:	bf00      	nop
  }

  return ret;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	889b      	ldrh	r3, [r3, #4]
 8005f46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d004      	beq.n	8005f5e <USBD_StdEPReq+0x2a>
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d002      	beq.n	8005f5e <USBD_StdEPReq+0x2a>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <USBD_StdEPReq+0x3e>
 8005f5c:	e135      	b.n	80061ca <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	4798      	blx	r3
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f70:	e130      	b.n	80061d4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d03e      	beq.n	8005ff8 <USBD_StdEPReq+0xc4>
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d002      	beq.n	8005f84 <USBD_StdEPReq+0x50>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d077      	beq.n	8006072 <USBD_StdEPReq+0x13e>
 8005f82:	e11c      	b.n	80061be <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d002      	beq.n	8005f94 <USBD_StdEPReq+0x60>
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d015      	beq.n	8005fbe <USBD_StdEPReq+0x8a>
 8005f92:	e02b      	b.n	8005fec <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00c      	beq.n	8005fb4 <USBD_StdEPReq+0x80>
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	2b80      	cmp	r3, #128	; 0x80
 8005f9e:	d009      	beq.n	8005fb4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fa0:	7bbb      	ldrb	r3, [r7, #14]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 faa9 	bl	80074fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005faa:	2180      	movs	r1, #128	; 0x80
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f001 faa5 	bl	80074fc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005fb2:	e020      	b.n	8005ff6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fc38 	bl	800682c <USBD_CtlError>
        break;
 8005fbc:	e01b      	b.n	8005ff6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	885b      	ldrh	r3, [r3, #2]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10e      	bne.n	8005fe4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <USBD_StdEPReq+0xb0>
 8005fcc:	7bbb      	ldrb	r3, [r7, #14]
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	d008      	beq.n	8005fe4 <USBD_StdEPReq+0xb0>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	88db      	ldrh	r3, [r3, #6]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f001 fa8c 	bl	80074fc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fcec 	bl	80069c2 <USBD_CtlSendStatus>

        break;
 8005fea:	e004      	b.n	8005ff6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fc1c 	bl	800682c <USBD_CtlError>
        break;
 8005ff4:	bf00      	nop
      }
      break;
 8005ff6:	e0e7      	b.n	80061c8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d002      	beq.n	8006008 <USBD_StdEPReq+0xd4>
 8006002:	2b03      	cmp	r3, #3
 8006004:	d015      	beq.n	8006032 <USBD_StdEPReq+0xfe>
 8006006:	e02d      	b.n	8006064 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <USBD_StdEPReq+0xf4>
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d009      	beq.n	8006028 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 fa6f 	bl	80074fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800601e:	2180      	movs	r1, #128	; 0x80
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fa6b 	bl	80074fc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006026:	e023      	b.n	8006070 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fbfe 	bl	800682c <USBD_CtlError>
        break;
 8006030:	e01e      	b.n	8006070 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	885b      	ldrh	r3, [r3, #2]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d119      	bne.n	800606e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 fa76 	bl	800753a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fcb7 	bl	80069c2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
        }
        break;
 8006062:	e004      	b.n	800606e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fbe0 	bl	800682c <USBD_CtlError>
        break;
 800606c:	e000      	b.n	8006070 <USBD_StdEPReq+0x13c>
        break;
 800606e:	bf00      	nop
      }
      break;
 8006070:	e0aa      	b.n	80061c8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006078:	2b02      	cmp	r3, #2
 800607a:	d002      	beq.n	8006082 <USBD_StdEPReq+0x14e>
 800607c:	2b03      	cmp	r3, #3
 800607e:	d032      	beq.n	80060e6 <USBD_StdEPReq+0x1b2>
 8006080:	e097      	b.n	80061b2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006082:	7bbb      	ldrb	r3, [r7, #14]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <USBD_StdEPReq+0x164>
 8006088:	7bbb      	ldrb	r3, [r7, #14]
 800608a:	2b80      	cmp	r3, #128	; 0x80
 800608c:	d004      	beq.n	8006098 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800608e:	6839      	ldr	r1, [r7, #0]
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fbcb 	bl	800682c <USBD_CtlError>
          break;
 8006096:	e091      	b.n	80061bc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800609c:	2b00      	cmp	r3, #0
 800609e:	da0b      	bge.n	80060b8 <USBD_StdEPReq+0x184>
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	3310      	adds	r3, #16
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4413      	add	r3, r2
 80060b4:	3304      	adds	r3, #4
 80060b6:	e00b      	b.n	80060d0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	3304      	adds	r3, #4
 80060d0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2202      	movs	r2, #2
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fc15 	bl	800690e <USBD_CtlSendData>
        break;
 80060e4:	e06a      	b.n	80061bc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80060e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da11      	bge.n	8006112 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	f003 020f 	and.w	r2, r3, #15
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	3324      	adds	r3, #36	; 0x24
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d117      	bne.n	8006138 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fb8e 	bl	800682c <USBD_CtlError>
            break;
 8006110:	e054      	b.n	80061bc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	f003 020f 	and.w	r2, r3, #15
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d104      	bne.n	8006138 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fb7b 	bl	800682c <USBD_CtlError>
            break;
 8006136:	e041      	b.n	80061bc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800613c:	2b00      	cmp	r3, #0
 800613e:	da0b      	bge.n	8006158 <USBD_StdEPReq+0x224>
 8006140:	7bbb      	ldrb	r3, [r7, #14]
 8006142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	3310      	adds	r3, #16
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	3304      	adds	r3, #4
 8006156:	e00b      	b.n	8006170 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	3304      	adds	r3, #4
 8006170:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <USBD_StdEPReq+0x24a>
 8006178:	7bbb      	ldrb	r3, [r7, #14]
 800617a:	2b80      	cmp	r3, #128	; 0x80
 800617c:	d103      	bne.n	8006186 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	e00e      	b.n	80061a4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 f9f4 	bl	8007578 <USBD_LL_IsStallEP>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2201      	movs	r2, #1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e002      	b.n	80061a4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2202      	movs	r2, #2
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fbaf 	bl	800690e <USBD_CtlSendData>
          break;
 80061b0:	e004      	b.n	80061bc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fb39 	bl	800682c <USBD_CtlError>
        break;
 80061ba:	bf00      	nop
      }
      break;
 80061bc:	e004      	b.n	80061c8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fb33 	bl	800682c <USBD_CtlError>
      break;
 80061c6:	bf00      	nop
    }
    break;
 80061c8:	e004      	b.n	80061d4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fb2d 	bl	800682c <USBD_CtlError>
    break;
 80061d2:	bf00      	nop
  }

  return ret;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	885b      	ldrh	r3, [r3, #2]
 80061fa:	0a1b      	lsrs	r3, r3, #8
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	2b06      	cmp	r3, #6
 8006202:	f200 8128 	bhi.w	8006456 <USBD_GetDescriptor+0x276>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <USBD_GetDescriptor+0x2c>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006229 	.word	0x08006229
 8006210:	08006241 	.word	0x08006241
 8006214:	08006281 	.word	0x08006281
 8006218:	08006457 	.word	0x08006457
 800621c:	08006457 	.word	0x08006457
 8006220:	080063f7 	.word	0x080063f7
 8006224:	08006423 	.word	0x08006423
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	7c12      	ldrb	r2, [r2, #16]
 8006234:	f107 0108 	add.w	r1, r7, #8
 8006238:	4610      	mov	r0, r2
 800623a:	4798      	blx	r3
 800623c:	60f8      	str	r0, [r7, #12]
    break;
 800623e:	e112      	b.n	8006466 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7c1b      	ldrb	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10d      	bne.n	8006264 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	f107 0208 	add.w	r2, r7, #8
 8006254:	4610      	mov	r0, r2
 8006256:	4798      	blx	r3
 8006258:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3301      	adds	r3, #1
 800625e:	2202      	movs	r2, #2
 8006260:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006262:	e100      	b.n	8006466 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	f107 0208 	add.w	r2, r7, #8
 8006270:	4610      	mov	r0, r2
 8006272:	4798      	blx	r3
 8006274:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3301      	adds	r3, #1
 800627a:	2202      	movs	r2, #2
 800627c:	701a      	strb	r2, [r3, #0]
    break;
 800627e:	e0f2      	b.n	8006466 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	885b      	ldrh	r3, [r3, #2]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b05      	cmp	r3, #5
 8006288:	f200 80ac 	bhi.w	80063e4 <USBD_GetDescriptor+0x204>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <USBD_GetDescriptor+0xb4>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062ad 	.word	0x080062ad
 8006298:	080062e1 	.word	0x080062e1
 800629c:	08006315 	.word	0x08006315
 80062a0:	08006349 	.word	0x08006349
 80062a4:	0800637d 	.word	0x0800637d
 80062a8:	080063b1 	.word	0x080063b1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00b      	beq.n	80062d0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	7c12      	ldrb	r2, [r2, #16]
 80062c4:	f107 0108 	add.w	r1, r7, #8
 80062c8:	4610      	mov	r0, r2
 80062ca:	4798      	blx	r3
 80062cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062ce:	e091      	b.n	80063f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 faaa 	bl	800682c <USBD_CtlError>
        err++;
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	3301      	adds	r3, #1
 80062dc:	72fb      	strb	r3, [r7, #11]
      break;
 80062de:	e089      	b.n	80063f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	7c12      	ldrb	r2, [r2, #16]
 80062f8:	f107 0108 	add.w	r1, r7, #8
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006302:	e077      	b.n	80063f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa90 	bl	800682c <USBD_CtlError>
        err++;
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	3301      	adds	r3, #1
 8006310:	72fb      	strb	r3, [r7, #11]
      break;
 8006312:	e06f      	b.n	80063f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	7c12      	ldrb	r2, [r2, #16]
 800632c:	f107 0108 	add.w	r1, r7, #8
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006336:	e05d      	b.n	80063f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa76 	bl	800682c <USBD_CtlError>
        err++;
 8006340:	7afb      	ldrb	r3, [r7, #11]
 8006342:	3301      	adds	r3, #1
 8006344:	72fb      	strb	r3, [r7, #11]
      break;
 8006346:	e055      	b.n	80063f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	7c12      	ldrb	r2, [r2, #16]
 8006360:	f107 0108 	add.w	r1, r7, #8
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
 8006368:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800636a:	e043      	b.n	80063f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa5c 	bl	800682c <USBD_CtlError>
        err++;
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	3301      	adds	r3, #1
 8006378:	72fb      	strb	r3, [r7, #11]
      break;
 800637a:	e03b      	b.n	80063f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	7c12      	ldrb	r2, [r2, #16]
 8006394:	f107 0108 	add.w	r1, r7, #8
 8006398:	4610      	mov	r0, r2
 800639a:	4798      	blx	r3
 800639c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800639e:	e029      	b.n	80063f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa42 	bl	800682c <USBD_CtlError>
        err++;
 80063a8:	7afb      	ldrb	r3, [r7, #11]
 80063aa:	3301      	adds	r3, #1
 80063ac:	72fb      	strb	r3, [r7, #11]
      break;
 80063ae:	e021      	b.n	80063f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	7c12      	ldrb	r2, [r2, #16]
 80063c8:	f107 0108 	add.w	r1, r7, #8
 80063cc:	4610      	mov	r0, r2
 80063ce:	4798      	blx	r3
 80063d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063d2:	e00f      	b.n	80063f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa28 	bl	800682c <USBD_CtlError>
        err++;
 80063dc:	7afb      	ldrb	r3, [r7, #11]
 80063de:	3301      	adds	r3, #1
 80063e0:	72fb      	strb	r3, [r7, #11]
      break;
 80063e2:	e007      	b.n	80063f4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fa20 	bl	800682c <USBD_CtlError>
      err++;
 80063ec:	7afb      	ldrb	r3, [r7, #11]
 80063ee:	3301      	adds	r3, #1
 80063f0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80063f2:	bf00      	nop
    }
    break;
 80063f4:	e037      	b.n	8006466 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	7c1b      	ldrb	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	f107 0208 	add.w	r2, r7, #8
 800640a:	4610      	mov	r0, r2
 800640c:	4798      	blx	r3
 800640e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006410:	e029      	b.n	8006466 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fa09 	bl	800682c <USBD_CtlError>
      err++;
 800641a:	7afb      	ldrb	r3, [r7, #11]
 800641c:	3301      	adds	r3, #1
 800641e:	72fb      	strb	r3, [r7, #11]
    break;
 8006420:	e021      	b.n	8006466 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	7c1b      	ldrb	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10d      	bne.n	8006446 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	f107 0208 	add.w	r2, r7, #8
 8006436:	4610      	mov	r0, r2
 8006438:	4798      	blx	r3
 800643a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3301      	adds	r3, #1
 8006440:	2207      	movs	r2, #7
 8006442:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006444:	e00f      	b.n	8006466 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f9ef 	bl	800682c <USBD_CtlError>
      err++;
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	3301      	adds	r3, #1
 8006452:	72fb      	strb	r3, [r7, #11]
    break;
 8006454:	e007      	b.n	8006466 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f9e7 	bl	800682c <USBD_CtlError>
    err++;
 800645e:	7afb      	ldrb	r3, [r7, #11]
 8006460:	3301      	adds	r3, #1
 8006462:	72fb      	strb	r3, [r7, #11]
    break;
 8006464:	bf00      	nop
  }

  if (err != 0U)
 8006466:	7afb      	ldrb	r3, [r7, #11]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d11e      	bne.n	80064aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	88db      	ldrh	r3, [r3, #6]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d016      	beq.n	80064a2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006474:	893b      	ldrh	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	88da      	ldrh	r2, [r3, #6]
 800647e:	893b      	ldrh	r3, [r7, #8]
 8006480:	4293      	cmp	r3, r2
 8006482:	bf28      	it	cs
 8006484:	4613      	movcs	r3, r2
 8006486:	b29b      	uxth	r3, r3
 8006488:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800648a:	893b      	ldrh	r3, [r7, #8]
 800648c:	461a      	mov	r2, r3
 800648e:	68f9      	ldr	r1, [r7, #12]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fa3c 	bl	800690e <USBD_CtlSendData>
 8006496:	e009      	b.n	80064ac <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f9c6 	bl	800682c <USBD_CtlError>
 80064a0:	e004      	b.n	80064ac <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa8d 	bl	80069c2 <USBD_CtlSendStatus>
 80064a8:	e000      	b.n	80064ac <USBD_GetDescriptor+0x2cc>
    return;
 80064aa:	bf00      	nop
    }
  }
}
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop

080064b4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	889b      	ldrh	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d130      	bne.n	8006528 <USBD_SetAddress+0x74>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	88db      	ldrh	r3, [r3, #6]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d12c      	bne.n	8006528 <USBD_SetAddress+0x74>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	885b      	ldrh	r3, [r3, #2]
 80064d2:	2b7f      	cmp	r3, #127	; 0x7f
 80064d4:	d828      	bhi.n	8006528 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	885b      	ldrh	r3, [r3, #2]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d104      	bne.n	80064f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f99c 	bl	800682c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f4:	e01c      	b.n	8006530 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7bfa      	ldrb	r2, [r7, #15]
 80064fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 f864 	bl	80075d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fa5a 	bl	80069c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651c:	e008      	b.n	8006530 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006526:	e003      	b.n	8006530 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f97e 	bl	800682c <USBD_CtlError>
  }
}
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	885b      	ldrh	r3, [r3, #2]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	4b4b      	ldr	r3, [pc, #300]	; (800667c <USBD_SetConfig+0x144>)
 800654e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006550:	4b4a      	ldr	r3, [pc, #296]	; (800667c <USBD_SetConfig+0x144>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d905      	bls.n	8006564 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f966 	bl	800682c <USBD_CtlError>
    return USBD_FAIL;
 8006560:	2303      	movs	r3, #3
 8006562:	e087      	b.n	8006674 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656a:	2b02      	cmp	r3, #2
 800656c:	d002      	beq.n	8006574 <USBD_SetConfig+0x3c>
 800656e:	2b03      	cmp	r3, #3
 8006570:	d025      	beq.n	80065be <USBD_SetConfig+0x86>
 8006572:	e071      	b.n	8006658 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006574:	4b41      	ldr	r3, [pc, #260]	; (800667c <USBD_SetConfig+0x144>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01c      	beq.n	80065b6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800657c:	4b3f      	ldr	r3, [pc, #252]	; (800667c <USBD_SetConfig+0x144>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006586:	4b3d      	ldr	r3, [pc, #244]	; (800667c <USBD_SetConfig+0x144>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff f9a7 	bl	80058e0 <USBD_SetClassConfig>
 8006592:	4603      	mov	r3, r0
 8006594:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f944 	bl	800682c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80065a4:	e065      	b.n	8006672 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa0b 	bl	80069c2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2203      	movs	r2, #3
 80065b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80065b4:	e05d      	b.n	8006672 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa03 	bl	80069c2 <USBD_CtlSendStatus>
    break;
 80065bc:	e059      	b.n	8006672 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80065be:	4b2f      	ldr	r3, [pc, #188]	; (800667c <USBD_SetConfig+0x144>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d112      	bne.n	80065ec <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2202      	movs	r2, #2
 80065ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80065ce:	4b2b      	ldr	r3, [pc, #172]	; (800667c <USBD_SetConfig+0x144>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065d8:	4b28      	ldr	r3, [pc, #160]	; (800667c <USBD_SetConfig+0x144>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff f99a 	bl	8005918 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f9ec 	bl	80069c2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80065ea:	e042      	b.n	8006672 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80065ec:	4b23      	ldr	r3, [pc, #140]	; (800667c <USBD_SetConfig+0x144>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d02a      	beq.n	8006650 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff f988 	bl	8005918 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006608:	4b1c      	ldr	r3, [pc, #112]	; (800667c <USBD_SetConfig+0x144>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <USBD_SetConfig+0x144>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff f961 	bl	80058e0 <USBD_SetClassConfig>
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00f      	beq.n	8006648 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f8fe 	bl	800682c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff f96d 	bl	8005918 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2202      	movs	r2, #2
 8006642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006646:	e014      	b.n	8006672 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f9ba 	bl	80069c2 <USBD_CtlSendStatus>
    break;
 800664e:	e010      	b.n	8006672 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f9b6 	bl	80069c2 <USBD_CtlSendStatus>
    break;
 8006656:	e00c      	b.n	8006672 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f8e6 	bl	800682c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006660:	4b06      	ldr	r3, [pc, #24]	; (800667c <USBD_SetConfig+0x144>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff f956 	bl	8005918 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800666c:	2303      	movs	r3, #3
 800666e:	73fb      	strb	r3, [r7, #15]
    break;
 8006670:	bf00      	nop
  }

  return ret;
 8006672:	7bfb      	ldrb	r3, [r7, #15]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20000204 	.word	0x20000204

08006680 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	88db      	ldrh	r3, [r3, #6]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d004      	beq.n	800669c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f8c9 	bl	800682c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800669a:	e021      	b.n	80066e0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	db17      	blt.n	80066d6 <USBD_GetConfig+0x56>
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	dd02      	ble.n	80066b0 <USBD_GetConfig+0x30>
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d00b      	beq.n	80066c6 <USBD_GetConfig+0x46>
 80066ae:	e012      	b.n	80066d6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3308      	adds	r3, #8
 80066ba:	2201      	movs	r2, #1
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f925 	bl	800690e <USBD_CtlSendData>
      break;
 80066c4:	e00c      	b.n	80066e0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	2201      	movs	r2, #1
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f91d 	bl	800690e <USBD_CtlSendData>
      break;
 80066d4:	e004      	b.n	80066e0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8a7 	bl	800682c <USBD_CtlError>
      break;
 80066de:	bf00      	nop
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f8:	3b01      	subs	r3, #1
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d81e      	bhi.n	800673c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	88db      	ldrh	r3, [r3, #6]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d004      	beq.n	8006710 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f88f 	bl	800682c <USBD_CtlError>
      break;
 800670e:	e01a      	b.n	8006746 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f043 0202 	orr.w	r2, r3, #2
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	330c      	adds	r3, #12
 8006730:	2202      	movs	r2, #2
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f8ea 	bl	800690e <USBD_CtlSendData>
    break;
 800673a:	e004      	b.n	8006746 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f874 	bl	800682c <USBD_CtlError>
    break;
 8006744:	bf00      	nop
  }
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	885b      	ldrh	r3, [r3, #2]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d106      	bne.n	800676e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f92a 	bl	80069c2 <USBD_CtlSendStatus>
  }
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006786:	3b01      	subs	r3, #1
 8006788:	2b02      	cmp	r3, #2
 800678a:	d80b      	bhi.n	80067a4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	885b      	ldrh	r3, [r3, #2]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d10c      	bne.n	80067ae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f910 	bl	80069c2 <USBD_CtlSendStatus>
      }
      break;
 80067a2:	e004      	b.n	80067ae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f840 	bl	800682c <USBD_CtlError>
      break;
 80067ac:	e000      	b.n	80067b0 <USBD_ClrFeature+0x3a>
      break;
 80067ae:	bf00      	nop
  }
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	781a      	ldrb	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3301      	adds	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff fad3 	bl	8005d8e <SWAPBYTE>
 80067e8:	4603      	mov	r3, r0
 80067ea:	461a      	mov	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3301      	adds	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3301      	adds	r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff fac6 	bl	8005d8e <SWAPBYTE>
 8006802:	4603      	mov	r3, r0
 8006804:	461a      	mov	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3301      	adds	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f7ff fab9 	bl	8005d8e <SWAPBYTE>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	80da      	strh	r2, [r3, #6]
}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006836:	2180      	movs	r1, #128	; 0x80
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fe5f 	bl	80074fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800683e:	2100      	movs	r1, #0
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fe5b 	bl	80074fc <USBD_LL_StallEP>
}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b086      	sub	sp, #24
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d036      	beq.n	80068d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006868:	6938      	ldr	r0, [r7, #16]
 800686a:	f000 f836 	bl	80068da <USBD_GetLen>
 800686e:	4603      	mov	r3, r0
 8006870:	3301      	adds	r3, #1
 8006872:	b29b      	uxth	r3, r3
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800687c:	7dfb      	ldrb	r3, [r7, #23]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4413      	add	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	7812      	ldrb	r2, [r2, #0]
 8006886:	701a      	strb	r2, [r3, #0]
  idx++;
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	3301      	adds	r3, #1
 800688c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	4413      	add	r3, r2
 8006894:	2203      	movs	r2, #3
 8006896:	701a      	strb	r2, [r3, #0]
  idx++;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	3301      	adds	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800689e:	e013      	b.n	80068c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	4413      	add	r3, r2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	7812      	ldrb	r2, [r2, #0]
 80068aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	3301      	adds	r3, #1
 80068b0:	613b      	str	r3, [r7, #16]
    idx++;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	3301      	adds	r3, #1
 80068b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	4413      	add	r3, r2
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
    idx++;
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	3301      	adds	r3, #1
 80068c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e7      	bne.n	80068a0 <USBD_GetString+0x52>
 80068d0:	e000      	b.n	80068d4 <USBD_GetString+0x86>
    return;
 80068d2:	bf00      	nop
  }
}
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068da:	b480      	push	{r7}
 80068dc:	b085      	sub	sp, #20
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068ea:	e005      	b.n	80068f8 <USBD_GetLen+0x1e>
  {
    len++;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	3301      	adds	r3, #1
 80068f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	3301      	adds	r3, #1
 80068f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1f5      	bne.n	80068ec <USBD_GetLen+0x12>
  }

  return len;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2202      	movs	r2, #2
 800691e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	2100      	movs	r1, #0
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fe6a 	bl	800760e <USBD_LL_Transmit>

  return USBD_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	2100      	movs	r1, #0
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fe59 	bl	800760e <USBD_LL_Transmit>

  return USBD_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2203      	movs	r2, #3
 8006976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	2100      	movs	r1, #0
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fe5d 	bl	8007650 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	2100      	movs	r1, #0
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 fe4c 	bl	8007650 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2204      	movs	r2, #4
 80069ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069d2:	2300      	movs	r3, #0
 80069d4:	2200      	movs	r2, #0
 80069d6:	2100      	movs	r1, #0
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fe18 	bl	800760e <USBD_LL_Transmit>

  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2205      	movs	r2, #5
 80069f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069f8:	2300      	movs	r3, #0
 80069fa:	2200      	movs	r2, #0
 80069fc:	2100      	movs	r1, #0
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fe26 	bl	8007650 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <spO2setup>:
#include "stm32f4xx_hal.h"
#include <string.h>

// Check device ID and Revision

void spO2setup(uint8_t powerLevel, uint8_t sampleAverage, uint8_t ledMode, int sampleRate, int pulseWidth, int adcRange){
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	4603      	mov	r3, r0
 8006a1a:	71fb      	strb	r3, [r7, #7]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	71bb      	strb	r3, [r7, #6]
 8006a20:	4613      	mov	r3, r2
 8006a22:	717b      	strb	r3, [r7, #5]
	setLedMode(MAX30102_MODE_REDIRONLY);
 8006a24:	2003      	movs	r0, #3
 8006a26:	f000 f837 	bl	8006a98 <setLedMode>
	setRedAmplitude(ledCurrent6_4mA);
 8006a2a:	201f      	movs	r0, #31
 8006a2c:	f000 f85c 	bl	8006ae8 <setRedAmplitude>
	setIRAmplitude(ledCurrent6_4mA);
 8006a30:	201f      	movs	r0, #31
 8006a32:	f000 f86f 	bl	8006b14 <setIRAmplitude>
	setSampleAverage(sampleAverage);
 8006a36:	79bb      	ldrb	r3, [r7, #6]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 f881 	bl	8006b40 <setSampleAverage>
	setSampleRate(sampleRate);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f892 	bl	8006b6c <setSampleRate>
	setPulseWidth(pulseWidth);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 f8a3 	bl	8006b98 <setPulseWidth>
	setADCrange(adcRange);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f8b4 	bl	8006bc4 <setADCrange>
	// set FIFO
	regAddr[0] = MAX30102_FIFOWRITEPTR;
 8006a5c:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <spO2setup+0x84>)
 8006a5e:	2204      	movs	r2, #4
 8006a60:	701a      	strb	r2, [r3, #0]
	regAddr[1] = 0x00;
 8006a62:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <spO2setup+0x84>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	705a      	strb	r2, [r3, #1]
	writeMCU(regAddr, 2);
 8006a68:	2102      	movs	r1, #2
 8006a6a:	480a      	ldr	r0, [pc, #40]	; (8006a94 <spO2setup+0x84>)
 8006a6c:	f000 f8c0 	bl	8006bf0 <writeMCU>
	regAddr[0] = MAX30102_FIFOOVERFLOW;
 8006a70:	4b08      	ldr	r3, [pc, #32]	; (8006a94 <spO2setup+0x84>)
 8006a72:	2205      	movs	r2, #5
 8006a74:	701a      	strb	r2, [r3, #0]
	writeMCU(regAddr, 2);
 8006a76:	2102      	movs	r1, #2
 8006a78:	4806      	ldr	r0, [pc, #24]	; (8006a94 <spO2setup+0x84>)
 8006a7a:	f000 f8b9 	bl	8006bf0 <writeMCU>
	regAddr[0] = MAX30102_FIFOREADPTR;
 8006a7e:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <spO2setup+0x84>)
 8006a80:	2206      	movs	r2, #6
 8006a82:	701a      	strb	r2, [r3, #0]
	writeMCU(regAddr, 2);
 8006a84:	2102      	movs	r1, #2
 8006a86:	4803      	ldr	r0, [pc, #12]	; (8006a94 <spO2setup+0x84>)
 8006a88:	f000 f8b2 	bl	8006bf0 <writeMCU>
}
 8006a8c:	bf00      	nop
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	2000029c 	.word	0x2000029c

08006a98 <setLedMode>:

void setLedMode(uint8_t mode){
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	71fb      	strb	r3, [r7, #7]
	// set spO2 mode Mode Configuration: 0x09; Modes [B0:B2] 011 Two leds
	regAddr[0] = MAX30102_MODECONFIG;
 8006aa2:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <setLedMode+0x48>)
 8006aa4:	2209      	movs	r2, #9
 8006aa6:	701a      	strb	r2, [r3, #0]
	regAddr[1] = mode;
 8006aa8:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <setLedMode+0x48>)
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	7053      	strb	r3, [r2, #1]
	writeMCU(regAddr, 2);
 8006aae:	2102      	movs	r1, #2
 8006ab0:	480b      	ldr	r0, [pc, #44]	; (8006ae0 <setLedMode+0x48>)
 8006ab2:	f000 f89d 	bl	8006bf0 <writeMCU>
	if(mode == MAX30102_MODE_REDIRONLY){
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d103      	bne.n	8006ac4 <setLedMode+0x2c>
		activeLEDs = 2;
 8006abc:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <setLedMode+0x4c>)
 8006abe:	2202      	movs	r2, #2
 8006ac0:	701a      	strb	r2, [r3, #0]
		activeLEDs = 1;
	} else {
		activeLEDs = 3; // if there are three LED's on MAX3010x Breakout board
	}

}
 8006ac2:	e009      	b.n	8006ad8 <setLedMode+0x40>
	} else if(mode == MAX30102_MODE_REDONLY){
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d103      	bne.n	8006ad2 <setLedMode+0x3a>
		activeLEDs = 1;
 8006aca:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <setLedMode+0x4c>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	701a      	strb	r2, [r3, #0]
}
 8006ad0:	e002      	b.n	8006ad8 <setLedMode+0x40>
		activeLEDs = 3; // if there are three LED's on MAX3010x Breakout board
 8006ad2:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <setLedMode+0x4c>)
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	701a      	strb	r2, [r3, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	2000029c 	.word	0x2000029c
 8006ae4:	200002a6 	.word	0x200002a6

08006ae8 <setRedAmplitude>:

void setRedAmplitude(uint8_t powerLevel){
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	71fb      	strb	r3, [r7, #7]
	regAddr[0] = MAX30102_LED1_PULSEAMP;
 8006af2:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <setRedAmplitude+0x28>)
 8006af4:	220c      	movs	r2, #12
 8006af6:	701a      	strb	r2, [r3, #0]
	regAddr[1] = powerLevel;
 8006af8:	4a05      	ldr	r2, [pc, #20]	; (8006b10 <setRedAmplitude+0x28>)
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	7053      	strb	r3, [r2, #1]
	writeMCU(regAddr, 2);
 8006afe:	2102      	movs	r1, #2
 8006b00:	4803      	ldr	r0, [pc, #12]	; (8006b10 <setRedAmplitude+0x28>)
 8006b02:	f000 f875 	bl	8006bf0 <writeMCU>
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	2000029c 	.word	0x2000029c

08006b14 <setIRAmplitude>:

void setIRAmplitude(uint8_t powerLevel){
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	71fb      	strb	r3, [r7, #7]
	regAddr[0] = MAX30102_LED2_PULSEAMP;
 8006b1e:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <setIRAmplitude+0x28>)
 8006b20:	220d      	movs	r2, #13
 8006b22:	701a      	strb	r2, [r3, #0]
	regAddr[1] = powerLevel;
 8006b24:	4a05      	ldr	r2, [pc, #20]	; (8006b3c <setIRAmplitude+0x28>)
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	7053      	strb	r3, [r2, #1]
	writeMCU(regAddr, 2);
 8006b2a:	2102      	movs	r1, #2
 8006b2c:	4803      	ldr	r0, [pc, #12]	; (8006b3c <setIRAmplitude+0x28>)
 8006b2e:	f000 f85f 	bl	8006bf0 <writeMCU>
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	2000029c 	.word	0x2000029c

08006b40 <setSampleAverage>:

void setSampleAverage(uint8_t sampleAverage){
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	4603      	mov	r3, r0
 8006b48:	71fb      	strb	r3, [r7, #7]
	regAddr[0] = MAX30102_FIFOCONFIG;
 8006b4a:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <setSampleAverage+0x28>)
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	701a      	strb	r2, [r3, #0]
	regAddr[1] = sampleAverage;
 8006b50:	4a05      	ldr	r2, [pc, #20]	; (8006b68 <setSampleAverage+0x28>)
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	7053      	strb	r3, [r2, #1]
	writeMCU(regAddr, 2);
 8006b56:	2102      	movs	r1, #2
 8006b58:	4803      	ldr	r0, [pc, #12]	; (8006b68 <setSampleAverage+0x28>)
 8006b5a:	f000 f849 	bl	8006bf0 <writeMCU>
}
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	2000029c 	.word	0x2000029c

08006b6c <setSampleRate>:

void setSampleRate(uint8_t sampleRate){
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
	regAddr[0] = MAX30102_PARTICLECONFIG;
 8006b76:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <setSampleRate+0x28>)
 8006b78:	220a      	movs	r2, #10
 8006b7a:	701a      	strb	r2, [r3, #0]
	regAddr[1] = sampleRate;
 8006b7c:	4a05      	ldr	r2, [pc, #20]	; (8006b94 <setSampleRate+0x28>)
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	7053      	strb	r3, [r2, #1]
	writeMCU(regAddr, 2);
 8006b82:	2102      	movs	r1, #2
 8006b84:	4803      	ldr	r0, [pc, #12]	; (8006b94 <setSampleRate+0x28>)
 8006b86:	f000 f833 	bl	8006bf0 <writeMCU>
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	2000029c 	.word	0x2000029c

08006b98 <setPulseWidth>:

void setPulseWidth(uint8_t pulseWidth){
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	71fb      	strb	r3, [r7, #7]
	regAddr[0] = MAX30102_PARTICLECONFIG;
 8006ba2:	4b07      	ldr	r3, [pc, #28]	; (8006bc0 <setPulseWidth+0x28>)
 8006ba4:	220a      	movs	r2, #10
 8006ba6:	701a      	strb	r2, [r3, #0]
	regAddr[1] = pulseWidth;
 8006ba8:	4a05      	ldr	r2, [pc, #20]	; (8006bc0 <setPulseWidth+0x28>)
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	7053      	strb	r3, [r2, #1]
	writeMCU(regAddr, 2);
 8006bae:	2102      	movs	r1, #2
 8006bb0:	4803      	ldr	r0, [pc, #12]	; (8006bc0 <setPulseWidth+0x28>)
 8006bb2:	f000 f81d 	bl	8006bf0 <writeMCU>

}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	2000029c 	.word	0x2000029c

08006bc4 <setADCrange>:

void setADCrange(uint8_t adcRange){
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	71fb      	strb	r3, [r7, #7]
	regAddr[0] = MAX30102_PARTICLECONFIG;
 8006bce:	4b07      	ldr	r3, [pc, #28]	; (8006bec <setADCrange+0x28>)
 8006bd0:	220a      	movs	r2, #10
 8006bd2:	701a      	strb	r2, [r3, #0]
	regAddr[1] = adcRange;
 8006bd4:	4a05      	ldr	r2, [pc, #20]	; (8006bec <setADCrange+0x28>)
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	7053      	strb	r3, [r2, #1]
	writeMCU(regAddr, 2);
 8006bda:	2102      	movs	r1, #2
 8006bdc:	4803      	ldr	r0, [pc, #12]	; (8006bec <setADCrange+0x28>)
 8006bde:	f000 f807 	bl	8006bf0 <writeMCU>
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	2000029c 	.word	0x2000029c

08006bf0 <writeMCU>:
	return 0;
}

// Read and write data

uint8_t writeMCU(uint8_t regAddr[2], uint8_t size){
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c1, Max30102_Address, regAddr, size, 10);
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	230a      	movs	r3, #10
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	21ae      	movs	r1, #174	; 0xae
 8006c0a:	4804      	ldr	r0, [pc, #16]	; (8006c1c <writeMCU+0x2c>)
 8006c0c:	f7fa fbac 	bl	8001368 <HAL_I2C_Master_Transmit>
	return 0;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000214 	.word	0x20000214

08006c20 <getData>:

	writeMCU(regAddr, 2);

}

uint8_t getData(void){
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af02      	add	r7, sp, #8
	regAddr[0] = MAX30102_FIFODATA;
 8006c26:	4b2f      	ldr	r3, [pc, #188]	; (8006ce4 <getData+0xc4>)
 8006c28:	2207      	movs	r2, #7
 8006c2a:	701a      	strb	r2, [r3, #0]
	regAddr[1] = 0x00;
 8006c2c:	4b2d      	ldr	r3, [pc, #180]	; (8006ce4 <getData+0xc4>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, Max30102_Address, regAddr, 1, 100);
 8006c32:	2364      	movs	r3, #100	; 0x64
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	2301      	movs	r3, #1
 8006c38:	4a2a      	ldr	r2, [pc, #168]	; (8006ce4 <getData+0xc4>)
 8006c3a:	21ae      	movs	r1, #174	; 0xae
 8006c3c:	482a      	ldr	r0, [pc, #168]	; (8006ce8 <getData+0xc8>)
 8006c3e:	f7fa fb93 	bl	8001368 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, Max30102_Address, pBuffer, 6, 100);
 8006c42:	2364      	movs	r3, #100	; 0x64
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	2306      	movs	r3, #6
 8006c48:	4a28      	ldr	r2, [pc, #160]	; (8006cec <getData+0xcc>)
 8006c4a:	21ae      	movs	r1, #174	; 0xae
 8006c4c:	4826      	ldr	r0, [pc, #152]	; (8006ce8 <getData+0xc8>)
 8006c4e:	f7fa fc89 	bl	8001564 <HAL_I2C_Master_Receive>
	/*IRAmp  = pBuffer[3] << 16 | pBuffer[4] << 8 | pBuffer[5];

	RedAmp &= 0x03FFFF;
	IRAmp &= 0x03FFFF;*/

	RedAmp0 = pBuffer[0];
 8006c52:	4b26      	ldr	r3, [pc, #152]	; (8006cec <getData+0xcc>)
 8006c54:	781a      	ldrb	r2, [r3, #0]
 8006c56:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <getData+0xd0>)
 8006c58:	701a      	strb	r2, [r3, #0]
	RedAmp1 = pBuffer[1];
 8006c5a:	4b24      	ldr	r3, [pc, #144]	; (8006cec <getData+0xcc>)
 8006c5c:	785a      	ldrb	r2, [r3, #1]
 8006c5e:	4b25      	ldr	r3, [pc, #148]	; (8006cf4 <getData+0xd4>)
 8006c60:	701a      	strb	r2, [r3, #0]
	RedAmp2 = pBuffer[2];
 8006c62:	4b22      	ldr	r3, [pc, #136]	; (8006cec <getData+0xcc>)
 8006c64:	789a      	ldrb	r2, [r3, #2]
 8006c66:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <getData+0xd8>)
 8006c68:	701a      	strb	r2, [r3, #0]
	RedAmp  = RedAmp0 << 16 | RedAmp1 <<8 | RedAmp2;
 8006c6a:	4b21      	ldr	r3, [pc, #132]	; (8006cf0 <getData+0xd0>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	b21a      	sxth	r2, r3
 8006c72:	4b20      	ldr	r3, [pc, #128]	; (8006cf4 <getData+0xd4>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	b21b      	sxth	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b21a      	sxth	r2, r3
 8006c7e:	4b1e      	ldr	r3, [pc, #120]	; (8006cf8 <getData+0xd8>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b21b      	sxth	r3, r3
 8006c84:	4313      	orrs	r3, r2
 8006c86:	b21b      	sxth	r3, r3
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	4b1c      	ldr	r3, [pc, #112]	; (8006cfc <getData+0xdc>)
 8006c8c:	801a      	strh	r2, [r3, #0]
	RedAmp &= 0x03FFFF;
 8006c8e:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <getData+0xdc>)
 8006c90:	881a      	ldrh	r2, [r3, #0]
 8006c92:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <getData+0xdc>)
 8006c94:	801a      	strh	r2, [r3, #0]

	IRAmp0	= pBuffer[3];
 8006c96:	4b15      	ldr	r3, [pc, #84]	; (8006cec <getData+0xcc>)
 8006c98:	78da      	ldrb	r2, [r3, #3]
 8006c9a:	4b19      	ldr	r3, [pc, #100]	; (8006d00 <getData+0xe0>)
 8006c9c:	701a      	strb	r2, [r3, #0]
	IRAmp1	= pBuffer[4];
 8006c9e:	4b13      	ldr	r3, [pc, #76]	; (8006cec <getData+0xcc>)
 8006ca0:	791a      	ldrb	r2, [r3, #4]
 8006ca2:	4b18      	ldr	r3, [pc, #96]	; (8006d04 <getData+0xe4>)
 8006ca4:	701a      	strb	r2, [r3, #0]
	IRAmp2	= pBuffer[5];
 8006ca6:	4b11      	ldr	r3, [pc, #68]	; (8006cec <getData+0xcc>)
 8006ca8:	795a      	ldrb	r2, [r3, #5]
 8006caa:	4b17      	ldr	r3, [pc, #92]	; (8006d08 <getData+0xe8>)
 8006cac:	701a      	strb	r2, [r3, #0]
	IRAmp	= IRAmp0 << 16| IRAmp1 << 8 | IRAmp2 ;
 8006cae:	4b14      	ldr	r3, [pc, #80]	; (8006d00 <getData+0xe0>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	041b      	lsls	r3, r3, #16
 8006cb4:	b21a      	sxth	r2, r3
 8006cb6:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <getData+0xe4>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	b21b      	sxth	r3, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	b21a      	sxth	r2, r3
 8006cc2:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <getData+0xe8>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	b21b      	sxth	r3, r3
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	b21b      	sxth	r3, r3
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <getData+0xec>)
 8006cd0:	801a      	strh	r2, [r3, #0]
	IRAmp  &= 0x03FFFF;
 8006cd2:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <getData+0xec>)
 8006cd4:	881a      	ldrh	r2, [r3, #0]
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <getData+0xec>)
 8006cd8:	801a      	strh	r2, [r3, #0]

	return 0;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	2000029c 	.word	0x2000029c
 8006ce8:	20000214 	.word	0x20000214
 8006cec:	2000035c 	.word	0x2000035c
 8006cf0:	2000037e 	.word	0x2000037e
 8006cf4:	200002a7 	.word	0x200002a7
 8006cf8:	200002a5 	.word	0x200002a5
 8006cfc:	20000358 	.word	0x20000358
 8006d00:	2000035a 	.word	0x2000035a
 8006d04:	2000032c 	.word	0x2000032c
 8006d08:	20000298 	.word	0x20000298
 8006d0c:	2000032a 	.word	0x2000032a

08006d10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d14:	2200      	movs	r2, #0
 8006d16:	4912      	ldr	r1, [pc, #72]	; (8006d60 <MX_USB_DEVICE_Init+0x50>)
 8006d18:	4812      	ldr	r0, [pc, #72]	; (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d1a:	f7fe fd73 	bl	8005804 <USBD_Init>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d24:	f7f9 fd68 	bl	80007f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d28:	490f      	ldr	r1, [pc, #60]	; (8006d68 <MX_USB_DEVICE_Init+0x58>)
 8006d2a:	480e      	ldr	r0, [pc, #56]	; (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d2c:	f7fe fda0 	bl	8005870 <USBD_RegisterClass>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d36:	f7f9 fd5f 	bl	80007f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d3a:	490c      	ldr	r1, [pc, #48]	; (8006d6c <MX_USB_DEVICE_Init+0x5c>)
 8006d3c:	4809      	ldr	r0, [pc, #36]	; (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d3e:	f7fe fcc5 	bl	80056cc <USBD_CDC_RegisterInterface>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d48:	f7f9 fd56 	bl	80007f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d4c:	4805      	ldr	r0, [pc, #20]	; (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d4e:	f7fe fdb0 	bl	80058b2 <USBD_Start>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d58:	f7f9 fd4e 	bl	80007f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d5c:	bf00      	nop
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000130 	.word	0x20000130
 8006d64:	20000384 	.word	0x20000384
 8006d68:	20000018 	.word	0x20000018
 8006d6c:	2000011c 	.word	0x2000011c

08006d70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d74:	2200      	movs	r2, #0
 8006d76:	4905      	ldr	r1, [pc, #20]	; (8006d8c <CDC_Init_FS+0x1c>)
 8006d78:	4805      	ldr	r0, [pc, #20]	; (8006d90 <CDC_Init_FS+0x20>)
 8006d7a:	f7fe fcbc 	bl	80056f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d7e:	4905      	ldr	r1, [pc, #20]	; (8006d94 <CDC_Init_FS+0x24>)
 8006d80:	4803      	ldr	r0, [pc, #12]	; (8006d90 <CDC_Init_FS+0x20>)
 8006d82:	f7fe fcd1 	bl	8005728 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000e54 	.word	0x20000e54
 8006d90:	20000384 	.word	0x20000384
 8006d94:	20000654 	.word	0x20000654

08006d98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	6039      	str	r1, [r7, #0]
 8006db2:	71fb      	strb	r3, [r7, #7]
 8006db4:	4613      	mov	r3, r2
 8006db6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	2b23      	cmp	r3, #35	; 0x23
 8006dbc:	d84a      	bhi.n	8006e54 <CDC_Control_FS+0xac>
 8006dbe:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <CDC_Control_FS+0x1c>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006e55 	.word	0x08006e55
 8006dc8:	08006e55 	.word	0x08006e55
 8006dcc:	08006e55 	.word	0x08006e55
 8006dd0:	08006e55 	.word	0x08006e55
 8006dd4:	08006e55 	.word	0x08006e55
 8006dd8:	08006e55 	.word	0x08006e55
 8006ddc:	08006e55 	.word	0x08006e55
 8006de0:	08006e55 	.word	0x08006e55
 8006de4:	08006e55 	.word	0x08006e55
 8006de8:	08006e55 	.word	0x08006e55
 8006dec:	08006e55 	.word	0x08006e55
 8006df0:	08006e55 	.word	0x08006e55
 8006df4:	08006e55 	.word	0x08006e55
 8006df8:	08006e55 	.word	0x08006e55
 8006dfc:	08006e55 	.word	0x08006e55
 8006e00:	08006e55 	.word	0x08006e55
 8006e04:	08006e55 	.word	0x08006e55
 8006e08:	08006e55 	.word	0x08006e55
 8006e0c:	08006e55 	.word	0x08006e55
 8006e10:	08006e55 	.word	0x08006e55
 8006e14:	08006e55 	.word	0x08006e55
 8006e18:	08006e55 	.word	0x08006e55
 8006e1c:	08006e55 	.word	0x08006e55
 8006e20:	08006e55 	.word	0x08006e55
 8006e24:	08006e55 	.word	0x08006e55
 8006e28:	08006e55 	.word	0x08006e55
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e55 	.word	0x08006e55
 8006e34:	08006e55 	.word	0x08006e55
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	08006e55 	.word	0x08006e55
 8006e40:	08006e55 	.word	0x08006e55
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e55 	.word	0x08006e55
 8006e4c:	08006e55 	.word	0x08006e55
 8006e50:	08006e55 	.word	0x08006e55
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e54:	bf00      	nop
  }

  return (USBD_OK);
 8006e56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4805      	ldr	r0, [pc, #20]	; (8006e88 <CDC_Receive_FS+0x24>)
 8006e72:	f7fe fc59 	bl	8005728 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e76:	4804      	ldr	r0, [pc, #16]	; (8006e88 <CDC_Receive_FS+0x24>)
 8006e78:	f7fe fc9a 	bl	80057b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006e7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000384 	.word	0x20000384

08006e8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <CDC_Transmit_FS+0x48>)
 8006e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e00b      	b.n	8006eca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006eb2:	887b      	ldrh	r3, [r7, #2]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	4806      	ldr	r0, [pc, #24]	; (8006ed4 <CDC_Transmit_FS+0x48>)
 8006eba:	f7fe fc1c 	bl	80056f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006ebe:	4805      	ldr	r0, [pc, #20]	; (8006ed4 <CDC_Transmit_FS+0x48>)
 8006ec0:	f7fe fc46 	bl	8005750 <USBD_CDC_TransmitPacket>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000384 	.word	0x20000384

08006ed8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	6039      	str	r1, [r7, #0]
 8006f06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2212      	movs	r2, #18
 8006f0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f0e:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	2000014c 	.word	0x2000014c

08006f20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	6039      	str	r1, [r7, #0]
 8006f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2204      	movs	r2, #4
 8006f30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f32:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000160 	.word	0x20000160

08006f44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	6039      	str	r1, [r7, #0]
 8006f4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d105      	bne.n	8006f62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4907      	ldr	r1, [pc, #28]	; (8006f78 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f5a:	4808      	ldr	r0, [pc, #32]	; (8006f7c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f5c:	f7ff fc77 	bl	800684e <USBD_GetString>
 8006f60:	e004      	b.n	8006f6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	4904      	ldr	r1, [pc, #16]	; (8006f78 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f66:	4805      	ldr	r0, [pc, #20]	; (8006f7c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f68:	f7ff fc71 	bl	800684e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f6c:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20001654 	.word	0x20001654
 8006f7c:	08007fc8 	.word	0x08007fc8

08006f80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	6039      	str	r1, [r7, #0]
 8006f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	4904      	ldr	r1, [pc, #16]	; (8006fa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f90:	4804      	ldr	r0, [pc, #16]	; (8006fa4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f92:	f7ff fc5c 	bl	800684e <USBD_GetString>
  return USBD_StrDesc;
 8006f96:	4b02      	ldr	r3, [pc, #8]	; (8006fa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20001654 	.word	0x20001654
 8006fa4:	08007fe0 	.word	0x08007fe0

08006fa8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	6039      	str	r1, [r7, #0]
 8006fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	221a      	movs	r2, #26
 8006fb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fba:	f000 f843 	bl	8007044 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fbe:	4b02      	ldr	r3, [pc, #8]	; (8006fc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000164 	.word	0x20000164

08006fcc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6039      	str	r1, [r7, #0]
 8006fd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d105      	bne.n	8006fea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	4907      	ldr	r1, [pc, #28]	; (8007000 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fe2:	4808      	ldr	r0, [pc, #32]	; (8007004 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fe4:	f7ff fc33 	bl	800684e <USBD_GetString>
 8006fe8:	e004      	b.n	8006ff4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	4904      	ldr	r1, [pc, #16]	; (8007000 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fee:	4805      	ldr	r0, [pc, #20]	; (8007004 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ff0:	f7ff fc2d 	bl	800684e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ff4:	4b02      	ldr	r3, [pc, #8]	; (8007000 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20001654 	.word	0x20001654
 8007004:	08007ff4 	.word	0x08007ff4

08007008 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	6039      	str	r1, [r7, #0]
 8007012:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	4907      	ldr	r1, [pc, #28]	; (800703c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800701e:	4808      	ldr	r0, [pc, #32]	; (8007040 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007020:	f7ff fc15 	bl	800684e <USBD_GetString>
 8007024:	e004      	b.n	8007030 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	4904      	ldr	r1, [pc, #16]	; (800703c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800702a:	4805      	ldr	r0, [pc, #20]	; (8007040 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800702c:	f7ff fc0f 	bl	800684e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007030:	4b02      	ldr	r3, [pc, #8]	; (800703c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20001654 	.word	0x20001654
 8007040:	08008000 	.word	0x08008000

08007044 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <Get_SerialNum+0x44>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007050:	4b0e      	ldr	r3, [pc, #56]	; (800708c <Get_SerialNum+0x48>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007056:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <Get_SerialNum+0x4c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4413      	add	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d009      	beq.n	800707e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800706a:	2208      	movs	r2, #8
 800706c:	4909      	ldr	r1, [pc, #36]	; (8007094 <Get_SerialNum+0x50>)
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f814 	bl	800709c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007074:	2204      	movs	r2, #4
 8007076:	4908      	ldr	r1, [pc, #32]	; (8007098 <Get_SerialNum+0x54>)
 8007078:	68b8      	ldr	r0, [r7, #8]
 800707a:	f000 f80f 	bl	800709c <IntToUnicode>
  }
}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	1fff7a10 	.word	0x1fff7a10
 800708c:	1fff7a14 	.word	0x1fff7a14
 8007090:	1fff7a18 	.word	0x1fff7a18
 8007094:	20000166 	.word	0x20000166
 8007098:	20000176 	.word	0x20000176

0800709c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]
 80070b2:	e027      	b.n	8007104 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	0f1b      	lsrs	r3, r3, #28
 80070b8:	2b09      	cmp	r3, #9
 80070ba:	d80b      	bhi.n	80070d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	0f1b      	lsrs	r3, r3, #28
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	4619      	mov	r1, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	440b      	add	r3, r1
 80070cc:	3230      	adds	r2, #48	; 0x30
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	e00a      	b.n	80070ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	0f1b      	lsrs	r3, r3, #28
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	7dfb      	ldrb	r3, [r7, #23]
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	4619      	mov	r1, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	440b      	add	r3, r1
 80070e4:	3237      	adds	r2, #55	; 0x37
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	011b      	lsls	r3, r3, #4
 80070ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	3301      	adds	r3, #1
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4413      	add	r3, r2
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	3301      	adds	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
 8007104:	7dfa      	ldrb	r2, [r7, #23]
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	429a      	cmp	r2, r3
 800710a:	d3d3      	bcc.n	80070b4 <IntToUnicode+0x18>
  }
}
 800710c:	bf00      	nop
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	; 0x28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007120:	f107 0314 	add.w	r3, r7, #20
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	605a      	str	r2, [r3, #4]
 800712a:	609a      	str	r2, [r3, #8]
 800712c:	60da      	str	r2, [r3, #12]
 800712e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007138:	d13a      	bne.n	80071b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800713a:	2300      	movs	r3, #0
 800713c:	613b      	str	r3, [r7, #16]
 800713e:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	4a1d      	ldr	r2, [pc, #116]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	6313      	str	r3, [r2, #48]	; 0x30
 800714a:	4b1b      	ldr	r3, [pc, #108]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007156:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800715a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800715c:	2302      	movs	r3, #2
 800715e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007160:	2300      	movs	r3, #0
 8007162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007164:	2303      	movs	r3, #3
 8007166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007168:	230a      	movs	r3, #10
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800716c:	f107 0314 	add.w	r3, r7, #20
 8007170:	4619      	mov	r1, r3
 8007172:	4812      	ldr	r0, [pc, #72]	; (80071bc <HAL_PCD_MspInit+0xa4>)
 8007174:	f7f9 fe0c 	bl	8000d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007178:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 800717a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717c:	4a0e      	ldr	r2, [pc, #56]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 800717e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007182:	6353      	str	r3, [r2, #52]	; 0x34
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 800718a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718c:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 800718e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007192:	6453      	str	r3, [r2, #68]	; 0x44
 8007194:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <HAL_PCD_MspInit+0xa0>)
 8007196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	2043      	movs	r0, #67	; 0x43
 80071a6:	f7f9 fdbc 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071aa:	2043      	movs	r0, #67	; 0x43
 80071ac:	f7f9 fdd5 	bl	8000d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80071b0:	bf00      	nop
 80071b2:	3728      	adds	r7, #40	; 0x28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40023800 	.word	0x40023800
 80071bc:	40020000 	.word	0x40020000

080071c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	f7fe fbb6 	bl	8005948 <USBD_LL_SetupStage>
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80071f6:	78fa      	ldrb	r2, [r7, #3]
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	1a9b      	subs	r3, r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	4619      	mov	r1, r3
 800720e:	f7fe fbee 	bl	80059ee <USBD_LL_DataOutStage>
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800722c:	78fa      	ldrb	r2, [r7, #3]
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4613      	mov	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	440b      	add	r3, r1
 800723a:	3348      	adds	r3, #72	; 0x48
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	78fb      	ldrb	r3, [r7, #3]
 8007240:	4619      	mov	r1, r3
 8007242:	f7fe fc37 	bl	8005ab4 <USBD_LL_DataInStage>
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fd3b 	bl	8005cd8 <USBD_LL_SOF>
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007272:	2301      	movs	r3, #1
 8007274:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
 8007282:	e008      	b.n	8007296 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d102      	bne.n	8007292 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800728c:	2301      	movs	r3, #1
 800728e:	73fb      	strb	r3, [r7, #15]
 8007290:	e001      	b.n	8007296 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007292:	f7f9 fab1 	bl	80007f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800729c:	7bfa      	ldrb	r2, [r7, #15]
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe fcde 	bl	8005c62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe fc97 	bl	8005be0 <USBD_LL_Reset>
}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fcd9 	bl	8005c82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <HAL_PCD_SuspendCallback+0x48>)
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	4a03      	ldr	r2, [pc, #12]	; (8007304 <HAL_PCD_SuspendCallback+0x48>)
 80072f6:	f043 0306 	orr.w	r3, r3, #6
 80072fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	e000ed00 	.word	0xe000ed00

08007308 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fcc8 	bl	8005cac <USBD_LL_Resume>
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fcf3 	bl	8005d26 <USBD_LL_IsoOUTIncomplete>
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	4611      	mov	r1, r2
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe fcd4 	bl	8005d0c <USBD_LL_IsoINIncomplete>
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fce0 	bl	8005d40 <USBD_LL_DevConnected>
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fcdd 	bl	8005d56 <USBD_LL_DevDisconnected>
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d13c      	bne.n	800742e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80073b4:	4a20      	ldr	r2, [pc, #128]	; (8007438 <USBD_LL_Init+0x94>)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <USBD_LL_Init+0x94>)
 80073c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073c4:	4b1c      	ldr	r3, [pc, #112]	; (8007438 <USBD_LL_Init+0x94>)
 80073c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80073ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80073cc:	4b1a      	ldr	r3, [pc, #104]	; (8007438 <USBD_LL_Init+0x94>)
 80073ce:	2204      	movs	r2, #4
 80073d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80073d2:	4b19      	ldr	r3, [pc, #100]	; (8007438 <USBD_LL_Init+0x94>)
 80073d4:	2202      	movs	r2, #2
 80073d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073d8:	4b17      	ldr	r3, [pc, #92]	; (8007438 <USBD_LL_Init+0x94>)
 80073da:	2200      	movs	r2, #0
 80073dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073de:	4b16      	ldr	r3, [pc, #88]	; (8007438 <USBD_LL_Init+0x94>)
 80073e0:	2202      	movs	r2, #2
 80073e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073e4:	4b14      	ldr	r3, [pc, #80]	; (8007438 <USBD_LL_Init+0x94>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80073ea:	4b13      	ldr	r3, [pc, #76]	; (8007438 <USBD_LL_Init+0x94>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80073f0:	4b11      	ldr	r3, [pc, #68]	; (8007438 <USBD_LL_Init+0x94>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80073f6:	4b10      	ldr	r3, [pc, #64]	; (8007438 <USBD_LL_Init+0x94>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80073fc:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <USBD_LL_Init+0x94>)
 80073fe:	2200      	movs	r2, #0
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007402:	480d      	ldr	r0, [pc, #52]	; (8007438 <USBD_LL_Init+0x94>)
 8007404:	f7fa fe01 	bl	800200a <HAL_PCD_Init>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800740e:	f7f9 f9f3 	bl	80007f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007412:	2180      	movs	r1, #128	; 0x80
 8007414:	4808      	ldr	r0, [pc, #32]	; (8007438 <USBD_LL_Init+0x94>)
 8007416:	f7fb ff5e 	bl	80032d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800741a:	2240      	movs	r2, #64	; 0x40
 800741c:	2100      	movs	r1, #0
 800741e:	4806      	ldr	r0, [pc, #24]	; (8007438 <USBD_LL_Init+0x94>)
 8007420:	f7fb ff12 	bl	8003248 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007424:	2280      	movs	r2, #128	; 0x80
 8007426:	2101      	movs	r1, #1
 8007428:	4803      	ldr	r0, [pc, #12]	; (8007438 <USBD_LL_Init+0x94>)
 800742a:	f7fb ff0d 	bl	8003248 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20001854 	.word	0x20001854

0800743c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007452:	4618      	mov	r0, r3
 8007454:	f7fa fef6 	bl	8002244 <HAL_PCD_Start>
 8007458:	4603      	mov	r3, r0
 800745a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 f92a 	bl	80076b8 <USBD_Get_USB_Status>
 8007464:	4603      	mov	r3, r0
 8007466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007468:	7bbb      	ldrb	r3, [r7, #14]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	4608      	mov	r0, r1
 800747c:	4611      	mov	r1, r2
 800747e:	461a      	mov	r2, r3
 8007480:	4603      	mov	r3, r0
 8007482:	70fb      	strb	r3, [r7, #3]
 8007484:	460b      	mov	r3, r1
 8007486:	70bb      	strb	r3, [r7, #2]
 8007488:	4613      	mov	r3, r2
 800748a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800749a:	78bb      	ldrb	r3, [r7, #2]
 800749c:	883a      	ldrh	r2, [r7, #0]
 800749e:	78f9      	ldrb	r1, [r7, #3]
 80074a0:	f7fb fada 	bl	8002a58 <HAL_PCD_EP_Open>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f904 	bl	80076b8 <USBD_Get_USB_Status>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	460b      	mov	r3, r1
 80074c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fb fb23 	bl	8002b28 <HAL_PCD_EP_Close>
 80074e2:	4603      	mov	r3, r0
 80074e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 f8e5 	bl	80076b8 <USBD_Get_USB_Status>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fb fbfb 	bl	8002d16 <HAL_PCD_EP_SetStall>
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f8c6 	bl	80076b8 <USBD_Get_USB_Status>
 800752c:	4603      	mov	r3, r0
 800752e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007530:	7bbb      	ldrb	r3, [r7, #14]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f7fb fc40 	bl	8002dde <HAL_PCD_EP_ClrStall>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f8a7 	bl	80076b8 <USBD_Get_USB_Status>
 800756a:	4603      	mov	r3, r0
 800756c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800756e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800758a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800758c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007590:	2b00      	cmp	r3, #0
 8007592:	da0b      	bge.n	80075ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	4613      	mov	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	333e      	adds	r3, #62	; 0x3e
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	e00b      	b.n	80075c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	4613      	mov	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	1a9b      	subs	r3, r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80075c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	4611      	mov	r1, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fb fa0d 	bl	8002a0e <HAL_PCD_SetAddress>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 f85c 	bl	80076b8 <USBD_Get_USB_Status>
 8007600:	4603      	mov	r3, r0
 8007602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007604:	7bbb      	ldrb	r3, [r7, #14]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b086      	sub	sp, #24
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
 800761a:	460b      	mov	r3, r1
 800761c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800762c:	7af9      	ldrb	r1, [r7, #11]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	f7fb fb26 	bl	8002c82 <HAL_PCD_EP_Transmit>
 8007636:	4603      	mov	r3, r0
 8007638:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f83b 	bl	80076b8 <USBD_Get_USB_Status>
 8007642:	4603      	mov	r3, r0
 8007644:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007646:	7dbb      	ldrb	r3, [r7, #22]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	607a      	str	r2, [r7, #4]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	460b      	mov	r3, r1
 800765e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800766e:	7af9      	ldrb	r1, [r7, #11]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	f7fb faa2 	bl	8002bbc <HAL_PCD_EP_Receive>
 8007678:	4603      	mov	r3, r0
 800767a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 f81a 	bl	80076b8 <USBD_Get_USB_Status>
 8007684:	4603      	mov	r3, r0
 8007686:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007688:	7dbb      	ldrb	r3, [r7, #22]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	4611      	mov	r1, r2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fb fad2 	bl	8002c52 <HAL_PCD_EP_GetRxCount>
 80076ae:	4603      	mov	r3, r0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d817      	bhi.n	80076fc <USBD_Get_USB_Status+0x44>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <USBD_Get_USB_Status+0x1c>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076e5 	.word	0x080076e5
 80076d8:	080076eb 	.word	0x080076eb
 80076dc:	080076f1 	.word	0x080076f1
 80076e0:	080076f7 	.word	0x080076f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]
    break;
 80076e8:	e00b      	b.n	8007702 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076ea:	2303      	movs	r3, #3
 80076ec:	73fb      	strb	r3, [r7, #15]
    break;
 80076ee:	e008      	b.n	8007702 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
    break;
 80076f4:	e005      	b.n	8007702 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076f6:	2303      	movs	r3, #3
 80076f8:	73fb      	strb	r3, [r7, #15]
    break;
 80076fa:	e002      	b.n	8007702 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007700:	bf00      	nop
  }
  return usb_status;
 8007702:	7bfb      	ldrb	r3, [r7, #15]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <__errno>:
 8007710:	4b01      	ldr	r3, [pc, #4]	; (8007718 <__errno+0x8>)
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	20000180 	.word	0x20000180

0800771c <__libc_init_array>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	4e0d      	ldr	r6, [pc, #52]	; (8007754 <__libc_init_array+0x38>)
 8007720:	4c0d      	ldr	r4, [pc, #52]	; (8007758 <__libc_init_array+0x3c>)
 8007722:	1ba4      	subs	r4, r4, r6
 8007724:	10a4      	asrs	r4, r4, #2
 8007726:	2500      	movs	r5, #0
 8007728:	42a5      	cmp	r5, r4
 800772a:	d109      	bne.n	8007740 <__libc_init_array+0x24>
 800772c:	4e0b      	ldr	r6, [pc, #44]	; (800775c <__libc_init_array+0x40>)
 800772e:	4c0c      	ldr	r4, [pc, #48]	; (8007760 <__libc_init_array+0x44>)
 8007730:	f000 fc36 	bl	8007fa0 <_init>
 8007734:	1ba4      	subs	r4, r4, r6
 8007736:	10a4      	asrs	r4, r4, #2
 8007738:	2500      	movs	r5, #0
 800773a:	42a5      	cmp	r5, r4
 800773c:	d105      	bne.n	800774a <__libc_init_array+0x2e>
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007744:	4798      	blx	r3
 8007746:	3501      	adds	r5, #1
 8007748:	e7ee      	b.n	8007728 <__libc_init_array+0xc>
 800774a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800774e:	4798      	blx	r3
 8007750:	3501      	adds	r5, #1
 8007752:	e7f2      	b.n	800773a <__libc_init_array+0x1e>
 8007754:	08008064 	.word	0x08008064
 8007758:	08008064 	.word	0x08008064
 800775c:	08008064 	.word	0x08008064
 8007760:	08008068 	.word	0x08008068

08007764 <malloc>:
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <malloc+0xc>)
 8007766:	4601      	mov	r1, r0
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f000 b861 	b.w	8007830 <_malloc_r>
 800776e:	bf00      	nop
 8007770:	20000180 	.word	0x20000180

08007774 <free>:
 8007774:	4b02      	ldr	r3, [pc, #8]	; (8007780 <free+0xc>)
 8007776:	4601      	mov	r1, r0
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	f000 b80b 	b.w	8007794 <_free_r>
 800777e:	bf00      	nop
 8007780:	20000180 	.word	0x20000180

08007784 <memset>:
 8007784:	4402      	add	r2, r0
 8007786:	4603      	mov	r3, r0
 8007788:	4293      	cmp	r3, r2
 800778a:	d100      	bne.n	800778e <memset+0xa>
 800778c:	4770      	bx	lr
 800778e:	f803 1b01 	strb.w	r1, [r3], #1
 8007792:	e7f9      	b.n	8007788 <memset+0x4>

08007794 <_free_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4605      	mov	r5, r0
 8007798:	2900      	cmp	r1, #0
 800779a:	d045      	beq.n	8007828 <_free_r+0x94>
 800779c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a0:	1f0c      	subs	r4, r1, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfb8      	it	lt
 80077a6:	18e4      	addlt	r4, r4, r3
 80077a8:	f000 f8cc 	bl	8007944 <__malloc_lock>
 80077ac:	4a1f      	ldr	r2, [pc, #124]	; (800782c <_free_r+0x98>)
 80077ae:	6813      	ldr	r3, [r2, #0]
 80077b0:	4610      	mov	r0, r2
 80077b2:	b933      	cbnz	r3, 80077c2 <_free_r+0x2e>
 80077b4:	6063      	str	r3, [r4, #4]
 80077b6:	6014      	str	r4, [r2, #0]
 80077b8:	4628      	mov	r0, r5
 80077ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077be:	f000 b8c2 	b.w	8007946 <__malloc_unlock>
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	d90c      	bls.n	80077e0 <_free_r+0x4c>
 80077c6:	6821      	ldr	r1, [r4, #0]
 80077c8:	1862      	adds	r2, r4, r1
 80077ca:	4293      	cmp	r3, r2
 80077cc:	bf04      	itt	eq
 80077ce:	681a      	ldreq	r2, [r3, #0]
 80077d0:	685b      	ldreq	r3, [r3, #4]
 80077d2:	6063      	str	r3, [r4, #4]
 80077d4:	bf04      	itt	eq
 80077d6:	1852      	addeq	r2, r2, r1
 80077d8:	6022      	streq	r2, [r4, #0]
 80077da:	6004      	str	r4, [r0, #0]
 80077dc:	e7ec      	b.n	80077b8 <_free_r+0x24>
 80077de:	4613      	mov	r3, r2
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	b10a      	cbz	r2, 80077e8 <_free_r+0x54>
 80077e4:	42a2      	cmp	r2, r4
 80077e6:	d9fa      	bls.n	80077de <_free_r+0x4a>
 80077e8:	6819      	ldr	r1, [r3, #0]
 80077ea:	1858      	adds	r0, r3, r1
 80077ec:	42a0      	cmp	r0, r4
 80077ee:	d10b      	bne.n	8007808 <_free_r+0x74>
 80077f0:	6820      	ldr	r0, [r4, #0]
 80077f2:	4401      	add	r1, r0
 80077f4:	1858      	adds	r0, r3, r1
 80077f6:	4282      	cmp	r2, r0
 80077f8:	6019      	str	r1, [r3, #0]
 80077fa:	d1dd      	bne.n	80077b8 <_free_r+0x24>
 80077fc:	6810      	ldr	r0, [r2, #0]
 80077fe:	6852      	ldr	r2, [r2, #4]
 8007800:	605a      	str	r2, [r3, #4]
 8007802:	4401      	add	r1, r0
 8007804:	6019      	str	r1, [r3, #0]
 8007806:	e7d7      	b.n	80077b8 <_free_r+0x24>
 8007808:	d902      	bls.n	8007810 <_free_r+0x7c>
 800780a:	230c      	movs	r3, #12
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	e7d3      	b.n	80077b8 <_free_r+0x24>
 8007810:	6820      	ldr	r0, [r4, #0]
 8007812:	1821      	adds	r1, r4, r0
 8007814:	428a      	cmp	r2, r1
 8007816:	bf04      	itt	eq
 8007818:	6811      	ldreq	r1, [r2, #0]
 800781a:	6852      	ldreq	r2, [r2, #4]
 800781c:	6062      	str	r2, [r4, #4]
 800781e:	bf04      	itt	eq
 8007820:	1809      	addeq	r1, r1, r0
 8007822:	6021      	streq	r1, [r4, #0]
 8007824:	605c      	str	r4, [r3, #4]
 8007826:	e7c7      	b.n	80077b8 <_free_r+0x24>
 8007828:	bd38      	pop	{r3, r4, r5, pc}
 800782a:	bf00      	nop
 800782c:	20000208 	.word	0x20000208

08007830 <_malloc_r>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	1ccd      	adds	r5, r1, #3
 8007834:	f025 0503 	bic.w	r5, r5, #3
 8007838:	3508      	adds	r5, #8
 800783a:	2d0c      	cmp	r5, #12
 800783c:	bf38      	it	cc
 800783e:	250c      	movcc	r5, #12
 8007840:	2d00      	cmp	r5, #0
 8007842:	4606      	mov	r6, r0
 8007844:	db01      	blt.n	800784a <_malloc_r+0x1a>
 8007846:	42a9      	cmp	r1, r5
 8007848:	d903      	bls.n	8007852 <_malloc_r+0x22>
 800784a:	230c      	movs	r3, #12
 800784c:	6033      	str	r3, [r6, #0]
 800784e:	2000      	movs	r0, #0
 8007850:	bd70      	pop	{r4, r5, r6, pc}
 8007852:	f000 f877 	bl	8007944 <__malloc_lock>
 8007856:	4a21      	ldr	r2, [pc, #132]	; (80078dc <_malloc_r+0xac>)
 8007858:	6814      	ldr	r4, [r2, #0]
 800785a:	4621      	mov	r1, r4
 800785c:	b991      	cbnz	r1, 8007884 <_malloc_r+0x54>
 800785e:	4c20      	ldr	r4, [pc, #128]	; (80078e0 <_malloc_r+0xb0>)
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	b91b      	cbnz	r3, 800786c <_malloc_r+0x3c>
 8007864:	4630      	mov	r0, r6
 8007866:	f000 f83d 	bl	80078e4 <_sbrk_r>
 800786a:	6020      	str	r0, [r4, #0]
 800786c:	4629      	mov	r1, r5
 800786e:	4630      	mov	r0, r6
 8007870:	f000 f838 	bl	80078e4 <_sbrk_r>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d124      	bne.n	80078c2 <_malloc_r+0x92>
 8007878:	230c      	movs	r3, #12
 800787a:	6033      	str	r3, [r6, #0]
 800787c:	4630      	mov	r0, r6
 800787e:	f000 f862 	bl	8007946 <__malloc_unlock>
 8007882:	e7e4      	b.n	800784e <_malloc_r+0x1e>
 8007884:	680b      	ldr	r3, [r1, #0]
 8007886:	1b5b      	subs	r3, r3, r5
 8007888:	d418      	bmi.n	80078bc <_malloc_r+0x8c>
 800788a:	2b0b      	cmp	r3, #11
 800788c:	d90f      	bls.n	80078ae <_malloc_r+0x7e>
 800788e:	600b      	str	r3, [r1, #0]
 8007890:	50cd      	str	r5, [r1, r3]
 8007892:	18cc      	adds	r4, r1, r3
 8007894:	4630      	mov	r0, r6
 8007896:	f000 f856 	bl	8007946 <__malloc_unlock>
 800789a:	f104 000b 	add.w	r0, r4, #11
 800789e:	1d23      	adds	r3, r4, #4
 80078a0:	f020 0007 	bic.w	r0, r0, #7
 80078a4:	1ac3      	subs	r3, r0, r3
 80078a6:	d0d3      	beq.n	8007850 <_malloc_r+0x20>
 80078a8:	425a      	negs	r2, r3
 80078aa:	50e2      	str	r2, [r4, r3]
 80078ac:	e7d0      	b.n	8007850 <_malloc_r+0x20>
 80078ae:	428c      	cmp	r4, r1
 80078b0:	684b      	ldr	r3, [r1, #4]
 80078b2:	bf16      	itet	ne
 80078b4:	6063      	strne	r3, [r4, #4]
 80078b6:	6013      	streq	r3, [r2, #0]
 80078b8:	460c      	movne	r4, r1
 80078ba:	e7eb      	b.n	8007894 <_malloc_r+0x64>
 80078bc:	460c      	mov	r4, r1
 80078be:	6849      	ldr	r1, [r1, #4]
 80078c0:	e7cc      	b.n	800785c <_malloc_r+0x2c>
 80078c2:	1cc4      	adds	r4, r0, #3
 80078c4:	f024 0403 	bic.w	r4, r4, #3
 80078c8:	42a0      	cmp	r0, r4
 80078ca:	d005      	beq.n	80078d8 <_malloc_r+0xa8>
 80078cc:	1a21      	subs	r1, r4, r0
 80078ce:	4630      	mov	r0, r6
 80078d0:	f000 f808 	bl	80078e4 <_sbrk_r>
 80078d4:	3001      	adds	r0, #1
 80078d6:	d0cf      	beq.n	8007878 <_malloc_r+0x48>
 80078d8:	6025      	str	r5, [r4, #0]
 80078da:	e7db      	b.n	8007894 <_malloc_r+0x64>
 80078dc:	20000208 	.word	0x20000208
 80078e0:	2000020c 	.word	0x2000020c

080078e4 <_sbrk_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4c06      	ldr	r4, [pc, #24]	; (8007900 <_sbrk_r+0x1c>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4605      	mov	r5, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	f7f9 f832 	bl	8000958 <_sbrk>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_sbrk_r+0x1a>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_sbrk_r+0x1a>
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	20001c5c 	.word	0x20001c5c

08007904 <siprintf>:
 8007904:	b40e      	push	{r1, r2, r3}
 8007906:	b500      	push	{lr}
 8007908:	b09c      	sub	sp, #112	; 0x70
 800790a:	ab1d      	add	r3, sp, #116	; 0x74
 800790c:	9002      	str	r0, [sp, #8]
 800790e:	9006      	str	r0, [sp, #24]
 8007910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007914:	4809      	ldr	r0, [pc, #36]	; (800793c <siprintf+0x38>)
 8007916:	9107      	str	r1, [sp, #28]
 8007918:	9104      	str	r1, [sp, #16]
 800791a:	4909      	ldr	r1, [pc, #36]	; (8007940 <siprintf+0x3c>)
 800791c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007920:	9105      	str	r1, [sp, #20]
 8007922:	6800      	ldr	r0, [r0, #0]
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	a902      	add	r1, sp, #8
 8007928:	f000 f868 	bl	80079fc <_svfiprintf_r>
 800792c:	9b02      	ldr	r3, [sp, #8]
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
 8007932:	b01c      	add	sp, #112	; 0x70
 8007934:	f85d eb04 	ldr.w	lr, [sp], #4
 8007938:	b003      	add	sp, #12
 800793a:	4770      	bx	lr
 800793c:	20000180 	.word	0x20000180
 8007940:	ffff0208 	.word	0xffff0208

08007944 <__malloc_lock>:
 8007944:	4770      	bx	lr

08007946 <__malloc_unlock>:
 8007946:	4770      	bx	lr

08007948 <__ssputs_r>:
 8007948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	688e      	ldr	r6, [r1, #8]
 800794e:	429e      	cmp	r6, r3
 8007950:	4682      	mov	sl, r0
 8007952:	460c      	mov	r4, r1
 8007954:	4690      	mov	r8, r2
 8007956:	4699      	mov	r9, r3
 8007958:	d837      	bhi.n	80079ca <__ssputs_r+0x82>
 800795a:	898a      	ldrh	r2, [r1, #12]
 800795c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007960:	d031      	beq.n	80079c6 <__ssputs_r+0x7e>
 8007962:	6825      	ldr	r5, [r4, #0]
 8007964:	6909      	ldr	r1, [r1, #16]
 8007966:	1a6f      	subs	r7, r5, r1
 8007968:	6965      	ldr	r5, [r4, #20]
 800796a:	2302      	movs	r3, #2
 800796c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007970:	fb95 f5f3 	sdiv	r5, r5, r3
 8007974:	f109 0301 	add.w	r3, r9, #1
 8007978:	443b      	add	r3, r7
 800797a:	429d      	cmp	r5, r3
 800797c:	bf38      	it	cc
 800797e:	461d      	movcc	r5, r3
 8007980:	0553      	lsls	r3, r2, #21
 8007982:	d530      	bpl.n	80079e6 <__ssputs_r+0x9e>
 8007984:	4629      	mov	r1, r5
 8007986:	f7ff ff53 	bl	8007830 <_malloc_r>
 800798a:	4606      	mov	r6, r0
 800798c:	b950      	cbnz	r0, 80079a4 <__ssputs_r+0x5c>
 800798e:	230c      	movs	r3, #12
 8007990:	f8ca 3000 	str.w	r3, [sl]
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800799a:	81a3      	strh	r3, [r4, #12]
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a4:	463a      	mov	r2, r7
 80079a6:	6921      	ldr	r1, [r4, #16]
 80079a8:	f000 faa8 	bl	8007efc <memcpy>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	6126      	str	r6, [r4, #16]
 80079ba:	6165      	str	r5, [r4, #20]
 80079bc:	443e      	add	r6, r7
 80079be:	1bed      	subs	r5, r5, r7
 80079c0:	6026      	str	r6, [r4, #0]
 80079c2:	60a5      	str	r5, [r4, #8]
 80079c4:	464e      	mov	r6, r9
 80079c6:	454e      	cmp	r6, r9
 80079c8:	d900      	bls.n	80079cc <__ssputs_r+0x84>
 80079ca:	464e      	mov	r6, r9
 80079cc:	4632      	mov	r2, r6
 80079ce:	4641      	mov	r1, r8
 80079d0:	6820      	ldr	r0, [r4, #0]
 80079d2:	f000 fa9e 	bl	8007f12 <memmove>
 80079d6:	68a3      	ldr	r3, [r4, #8]
 80079d8:	1b9b      	subs	r3, r3, r6
 80079da:	60a3      	str	r3, [r4, #8]
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	441e      	add	r6, r3
 80079e0:	6026      	str	r6, [r4, #0]
 80079e2:	2000      	movs	r0, #0
 80079e4:	e7dc      	b.n	80079a0 <__ssputs_r+0x58>
 80079e6:	462a      	mov	r2, r5
 80079e8:	f000 faac 	bl	8007f44 <_realloc_r>
 80079ec:	4606      	mov	r6, r0
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d1e2      	bne.n	80079b8 <__ssputs_r+0x70>
 80079f2:	6921      	ldr	r1, [r4, #16]
 80079f4:	4650      	mov	r0, sl
 80079f6:	f7ff fecd 	bl	8007794 <_free_r>
 80079fa:	e7c8      	b.n	800798e <__ssputs_r+0x46>

080079fc <_svfiprintf_r>:
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a00:	461d      	mov	r5, r3
 8007a02:	898b      	ldrh	r3, [r1, #12]
 8007a04:	061f      	lsls	r7, r3, #24
 8007a06:	b09d      	sub	sp, #116	; 0x74
 8007a08:	4680      	mov	r8, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	4616      	mov	r6, r2
 8007a0e:	d50f      	bpl.n	8007a30 <_svfiprintf_r+0x34>
 8007a10:	690b      	ldr	r3, [r1, #16]
 8007a12:	b96b      	cbnz	r3, 8007a30 <_svfiprintf_r+0x34>
 8007a14:	2140      	movs	r1, #64	; 0x40
 8007a16:	f7ff ff0b 	bl	8007830 <_malloc_r>
 8007a1a:	6020      	str	r0, [r4, #0]
 8007a1c:	6120      	str	r0, [r4, #16]
 8007a1e:	b928      	cbnz	r0, 8007a2c <_svfiprintf_r+0x30>
 8007a20:	230c      	movs	r3, #12
 8007a22:	f8c8 3000 	str.w	r3, [r8]
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2a:	e0c8      	b.n	8007bbe <_svfiprintf_r+0x1c2>
 8007a2c:	2340      	movs	r3, #64	; 0x40
 8007a2e:	6163      	str	r3, [r4, #20]
 8007a30:	2300      	movs	r3, #0
 8007a32:	9309      	str	r3, [sp, #36]	; 0x24
 8007a34:	2320      	movs	r3, #32
 8007a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a3a:	2330      	movs	r3, #48	; 0x30
 8007a3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a40:	9503      	str	r5, [sp, #12]
 8007a42:	f04f 0b01 	mov.w	fp, #1
 8007a46:	4637      	mov	r7, r6
 8007a48:	463d      	mov	r5, r7
 8007a4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a4e:	b10b      	cbz	r3, 8007a54 <_svfiprintf_r+0x58>
 8007a50:	2b25      	cmp	r3, #37	; 0x25
 8007a52:	d13e      	bne.n	8007ad2 <_svfiprintf_r+0xd6>
 8007a54:	ebb7 0a06 	subs.w	sl, r7, r6
 8007a58:	d00b      	beq.n	8007a72 <_svfiprintf_r+0x76>
 8007a5a:	4653      	mov	r3, sl
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4640      	mov	r0, r8
 8007a62:	f7ff ff71 	bl	8007948 <__ssputs_r>
 8007a66:	3001      	adds	r0, #1
 8007a68:	f000 80a4 	beq.w	8007bb4 <_svfiprintf_r+0x1b8>
 8007a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6e:	4453      	add	r3, sl
 8007a70:	9309      	str	r3, [sp, #36]	; 0x24
 8007a72:	783b      	ldrb	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 809d 	beq.w	8007bb4 <_svfiprintf_r+0x1b8>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	9307      	str	r3, [sp, #28]
 8007a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a8e:	462f      	mov	r7, r5
 8007a90:	2205      	movs	r2, #5
 8007a92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007a96:	4850      	ldr	r0, [pc, #320]	; (8007bd8 <_svfiprintf_r+0x1dc>)
 8007a98:	f7f8 fba2 	bl	80001e0 <memchr>
 8007a9c:	9b04      	ldr	r3, [sp, #16]
 8007a9e:	b9d0      	cbnz	r0, 8007ad6 <_svfiprintf_r+0xda>
 8007aa0:	06d9      	lsls	r1, r3, #27
 8007aa2:	bf44      	itt	mi
 8007aa4:	2220      	movmi	r2, #32
 8007aa6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007aaa:	071a      	lsls	r2, r3, #28
 8007aac:	bf44      	itt	mi
 8007aae:	222b      	movmi	r2, #43	; 0x2b
 8007ab0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ab4:	782a      	ldrb	r2, [r5, #0]
 8007ab6:	2a2a      	cmp	r2, #42	; 0x2a
 8007ab8:	d015      	beq.n	8007ae6 <_svfiprintf_r+0xea>
 8007aba:	9a07      	ldr	r2, [sp, #28]
 8007abc:	462f      	mov	r7, r5
 8007abe:	2000      	movs	r0, #0
 8007ac0:	250a      	movs	r5, #10
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac8:	3b30      	subs	r3, #48	; 0x30
 8007aca:	2b09      	cmp	r3, #9
 8007acc:	d94d      	bls.n	8007b6a <_svfiprintf_r+0x16e>
 8007ace:	b1b8      	cbz	r0, 8007b00 <_svfiprintf_r+0x104>
 8007ad0:	e00f      	b.n	8007af2 <_svfiprintf_r+0xf6>
 8007ad2:	462f      	mov	r7, r5
 8007ad4:	e7b8      	b.n	8007a48 <_svfiprintf_r+0x4c>
 8007ad6:	4a40      	ldr	r2, [pc, #256]	; (8007bd8 <_svfiprintf_r+0x1dc>)
 8007ad8:	1a80      	subs	r0, r0, r2
 8007ada:	fa0b f000 	lsl.w	r0, fp, r0
 8007ade:	4318      	orrs	r0, r3
 8007ae0:	9004      	str	r0, [sp, #16]
 8007ae2:	463d      	mov	r5, r7
 8007ae4:	e7d3      	b.n	8007a8e <_svfiprintf_r+0x92>
 8007ae6:	9a03      	ldr	r2, [sp, #12]
 8007ae8:	1d11      	adds	r1, r2, #4
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	9103      	str	r1, [sp, #12]
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	db01      	blt.n	8007af6 <_svfiprintf_r+0xfa>
 8007af2:	9207      	str	r2, [sp, #28]
 8007af4:	e004      	b.n	8007b00 <_svfiprintf_r+0x104>
 8007af6:	4252      	negs	r2, r2
 8007af8:	f043 0302 	orr.w	r3, r3, #2
 8007afc:	9207      	str	r2, [sp, #28]
 8007afe:	9304      	str	r3, [sp, #16]
 8007b00:	783b      	ldrb	r3, [r7, #0]
 8007b02:	2b2e      	cmp	r3, #46	; 0x2e
 8007b04:	d10c      	bne.n	8007b20 <_svfiprintf_r+0x124>
 8007b06:	787b      	ldrb	r3, [r7, #1]
 8007b08:	2b2a      	cmp	r3, #42	; 0x2a
 8007b0a:	d133      	bne.n	8007b74 <_svfiprintf_r+0x178>
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	1d1a      	adds	r2, r3, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	9203      	str	r2, [sp, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bfb8      	it	lt
 8007b18:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b1c:	3702      	adds	r7, #2
 8007b1e:	9305      	str	r3, [sp, #20]
 8007b20:	4d2e      	ldr	r5, [pc, #184]	; (8007bdc <_svfiprintf_r+0x1e0>)
 8007b22:	7839      	ldrb	r1, [r7, #0]
 8007b24:	2203      	movs	r2, #3
 8007b26:	4628      	mov	r0, r5
 8007b28:	f7f8 fb5a 	bl	80001e0 <memchr>
 8007b2c:	b138      	cbz	r0, 8007b3e <_svfiprintf_r+0x142>
 8007b2e:	2340      	movs	r3, #64	; 0x40
 8007b30:	1b40      	subs	r0, r0, r5
 8007b32:	fa03 f000 	lsl.w	r0, r3, r0
 8007b36:	9b04      	ldr	r3, [sp, #16]
 8007b38:	4303      	orrs	r3, r0
 8007b3a:	3701      	adds	r7, #1
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	7839      	ldrb	r1, [r7, #0]
 8007b40:	4827      	ldr	r0, [pc, #156]	; (8007be0 <_svfiprintf_r+0x1e4>)
 8007b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b46:	2206      	movs	r2, #6
 8007b48:	1c7e      	adds	r6, r7, #1
 8007b4a:	f7f8 fb49 	bl	80001e0 <memchr>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d038      	beq.n	8007bc4 <_svfiprintf_r+0x1c8>
 8007b52:	4b24      	ldr	r3, [pc, #144]	; (8007be4 <_svfiprintf_r+0x1e8>)
 8007b54:	bb13      	cbnz	r3, 8007b9c <_svfiprintf_r+0x1a0>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	3307      	adds	r3, #7
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	3308      	adds	r3, #8
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b64:	444b      	add	r3, r9
 8007b66:	9309      	str	r3, [sp, #36]	; 0x24
 8007b68:	e76d      	b.n	8007a46 <_svfiprintf_r+0x4a>
 8007b6a:	fb05 3202 	mla	r2, r5, r2, r3
 8007b6e:	2001      	movs	r0, #1
 8007b70:	460f      	mov	r7, r1
 8007b72:	e7a6      	b.n	8007ac2 <_svfiprintf_r+0xc6>
 8007b74:	2300      	movs	r3, #0
 8007b76:	3701      	adds	r7, #1
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	250a      	movs	r5, #10
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b84:	3a30      	subs	r2, #48	; 0x30
 8007b86:	2a09      	cmp	r2, #9
 8007b88:	d903      	bls.n	8007b92 <_svfiprintf_r+0x196>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0c8      	beq.n	8007b20 <_svfiprintf_r+0x124>
 8007b8e:	9105      	str	r1, [sp, #20]
 8007b90:	e7c6      	b.n	8007b20 <_svfiprintf_r+0x124>
 8007b92:	fb05 2101 	mla	r1, r5, r1, r2
 8007b96:	2301      	movs	r3, #1
 8007b98:	4607      	mov	r7, r0
 8007b9a:	e7f0      	b.n	8007b7e <_svfiprintf_r+0x182>
 8007b9c:	ab03      	add	r3, sp, #12
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <_svfiprintf_r+0x1ec>)
 8007ba4:	a904      	add	r1, sp, #16
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	f3af 8000 	nop.w
 8007bac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007bb0:	4681      	mov	r9, r0
 8007bb2:	d1d6      	bne.n	8007b62 <_svfiprintf_r+0x166>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	065b      	lsls	r3, r3, #25
 8007bb8:	f53f af35 	bmi.w	8007a26 <_svfiprintf_r+0x2a>
 8007bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bbe:	b01d      	add	sp, #116	; 0x74
 8007bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc4:	ab03      	add	r3, sp, #12
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	4622      	mov	r2, r4
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <_svfiprintf_r+0x1ec>)
 8007bcc:	a904      	add	r1, sp, #16
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f000 f882 	bl	8007cd8 <_printf_i>
 8007bd4:	e7ea      	b.n	8007bac <_svfiprintf_r+0x1b0>
 8007bd6:	bf00      	nop
 8007bd8:	08008028 	.word	0x08008028
 8007bdc:	0800802e 	.word	0x0800802e
 8007be0:	08008032 	.word	0x08008032
 8007be4:	00000000 	.word	0x00000000
 8007be8:	08007949 	.word	0x08007949

08007bec <_printf_common>:
 8007bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	4691      	mov	r9, r2
 8007bf2:	461f      	mov	r7, r3
 8007bf4:	688a      	ldr	r2, [r1, #8]
 8007bf6:	690b      	ldr	r3, [r1, #16]
 8007bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	bfb8      	it	lt
 8007c00:	4613      	movlt	r3, r2
 8007c02:	f8c9 3000 	str.w	r3, [r9]
 8007c06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	b112      	cbz	r2, 8007c16 <_printf_common+0x2a>
 8007c10:	3301      	adds	r3, #1
 8007c12:	f8c9 3000 	str.w	r3, [r9]
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	0699      	lsls	r1, r3, #26
 8007c1a:	bf42      	ittt	mi
 8007c1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c20:	3302      	addmi	r3, #2
 8007c22:	f8c9 3000 	strmi.w	r3, [r9]
 8007c26:	6825      	ldr	r5, [r4, #0]
 8007c28:	f015 0506 	ands.w	r5, r5, #6
 8007c2c:	d107      	bne.n	8007c3e <_printf_common+0x52>
 8007c2e:	f104 0a19 	add.w	sl, r4, #25
 8007c32:	68e3      	ldr	r3, [r4, #12]
 8007c34:	f8d9 2000 	ldr.w	r2, [r9]
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	42ab      	cmp	r3, r5
 8007c3c:	dc28      	bgt.n	8007c90 <_printf_common+0xa4>
 8007c3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007c42:	6822      	ldr	r2, [r4, #0]
 8007c44:	3300      	adds	r3, #0
 8007c46:	bf18      	it	ne
 8007c48:	2301      	movne	r3, #1
 8007c4a:	0692      	lsls	r2, r2, #26
 8007c4c:	d42d      	bmi.n	8007caa <_printf_common+0xbe>
 8007c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c52:	4639      	mov	r1, r7
 8007c54:	4630      	mov	r0, r6
 8007c56:	47c0      	blx	r8
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d020      	beq.n	8007c9e <_printf_common+0xb2>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	68e5      	ldr	r5, [r4, #12]
 8007c60:	f8d9 2000 	ldr.w	r2, [r9]
 8007c64:	f003 0306 	and.w	r3, r3, #6
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	bf08      	it	eq
 8007c6c:	1aad      	subeq	r5, r5, r2
 8007c6e:	68a3      	ldr	r3, [r4, #8]
 8007c70:	6922      	ldr	r2, [r4, #16]
 8007c72:	bf0c      	ite	eq
 8007c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c78:	2500      	movne	r5, #0
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	bfc4      	itt	gt
 8007c7e:	1a9b      	subgt	r3, r3, r2
 8007c80:	18ed      	addgt	r5, r5, r3
 8007c82:	f04f 0900 	mov.w	r9, #0
 8007c86:	341a      	adds	r4, #26
 8007c88:	454d      	cmp	r5, r9
 8007c8a:	d11a      	bne.n	8007cc2 <_printf_common+0xd6>
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	e008      	b.n	8007ca2 <_printf_common+0xb6>
 8007c90:	2301      	movs	r3, #1
 8007c92:	4652      	mov	r2, sl
 8007c94:	4639      	mov	r1, r7
 8007c96:	4630      	mov	r0, r6
 8007c98:	47c0      	blx	r8
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d103      	bne.n	8007ca6 <_printf_common+0xba>
 8007c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca6:	3501      	adds	r5, #1
 8007ca8:	e7c3      	b.n	8007c32 <_printf_common+0x46>
 8007caa:	18e1      	adds	r1, r4, r3
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	2030      	movs	r0, #48	; 0x30
 8007cb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cb4:	4422      	add	r2, r4
 8007cb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cbe:	3302      	adds	r3, #2
 8007cc0:	e7c5      	b.n	8007c4e <_printf_common+0x62>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	4630      	mov	r0, r6
 8007cca:	47c0      	blx	r8
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d0e6      	beq.n	8007c9e <_printf_common+0xb2>
 8007cd0:	f109 0901 	add.w	r9, r9, #1
 8007cd4:	e7d8      	b.n	8007c88 <_printf_common+0x9c>
	...

08007cd8 <_printf_i>:
 8007cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	7e09      	ldrb	r1, [r1, #24]
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	296e      	cmp	r1, #110	; 0x6e
 8007ce8:	4617      	mov	r7, r2
 8007cea:	4606      	mov	r6, r0
 8007cec:	4698      	mov	r8, r3
 8007cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cf0:	f000 80b3 	beq.w	8007e5a <_printf_i+0x182>
 8007cf4:	d822      	bhi.n	8007d3c <_printf_i+0x64>
 8007cf6:	2963      	cmp	r1, #99	; 0x63
 8007cf8:	d036      	beq.n	8007d68 <_printf_i+0x90>
 8007cfa:	d80a      	bhi.n	8007d12 <_printf_i+0x3a>
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	f000 80b9 	beq.w	8007e74 <_printf_i+0x19c>
 8007d02:	2958      	cmp	r1, #88	; 0x58
 8007d04:	f000 8083 	beq.w	8007e0e <_printf_i+0x136>
 8007d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007d10:	e032      	b.n	8007d78 <_printf_i+0xa0>
 8007d12:	2964      	cmp	r1, #100	; 0x64
 8007d14:	d001      	beq.n	8007d1a <_printf_i+0x42>
 8007d16:	2969      	cmp	r1, #105	; 0x69
 8007d18:	d1f6      	bne.n	8007d08 <_printf_i+0x30>
 8007d1a:	6820      	ldr	r0, [r4, #0]
 8007d1c:	6813      	ldr	r3, [r2, #0]
 8007d1e:	0605      	lsls	r5, r0, #24
 8007d20:	f103 0104 	add.w	r1, r3, #4
 8007d24:	d52a      	bpl.n	8007d7c <_printf_i+0xa4>
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6011      	str	r1, [r2, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	da03      	bge.n	8007d36 <_printf_i+0x5e>
 8007d2e:	222d      	movs	r2, #45	; 0x2d
 8007d30:	425b      	negs	r3, r3
 8007d32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007d36:	486f      	ldr	r0, [pc, #444]	; (8007ef4 <_printf_i+0x21c>)
 8007d38:	220a      	movs	r2, #10
 8007d3a:	e039      	b.n	8007db0 <_printf_i+0xd8>
 8007d3c:	2973      	cmp	r1, #115	; 0x73
 8007d3e:	f000 809d 	beq.w	8007e7c <_printf_i+0x1a4>
 8007d42:	d808      	bhi.n	8007d56 <_printf_i+0x7e>
 8007d44:	296f      	cmp	r1, #111	; 0x6f
 8007d46:	d020      	beq.n	8007d8a <_printf_i+0xb2>
 8007d48:	2970      	cmp	r1, #112	; 0x70
 8007d4a:	d1dd      	bne.n	8007d08 <_printf_i+0x30>
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	f043 0320 	orr.w	r3, r3, #32
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	e003      	b.n	8007d5e <_printf_i+0x86>
 8007d56:	2975      	cmp	r1, #117	; 0x75
 8007d58:	d017      	beq.n	8007d8a <_printf_i+0xb2>
 8007d5a:	2978      	cmp	r1, #120	; 0x78
 8007d5c:	d1d4      	bne.n	8007d08 <_printf_i+0x30>
 8007d5e:	2378      	movs	r3, #120	; 0x78
 8007d60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d64:	4864      	ldr	r0, [pc, #400]	; (8007ef8 <_printf_i+0x220>)
 8007d66:	e055      	b.n	8007e14 <_printf_i+0x13c>
 8007d68:	6813      	ldr	r3, [r2, #0]
 8007d6a:	1d19      	adds	r1, r3, #4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6011      	str	r1, [r2, #0]
 8007d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e08c      	b.n	8007e96 <_printf_i+0x1be>
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6011      	str	r1, [r2, #0]
 8007d80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d84:	bf18      	it	ne
 8007d86:	b21b      	sxthne	r3, r3
 8007d88:	e7cf      	b.n	8007d2a <_printf_i+0x52>
 8007d8a:	6813      	ldr	r3, [r2, #0]
 8007d8c:	6825      	ldr	r5, [r4, #0]
 8007d8e:	1d18      	adds	r0, r3, #4
 8007d90:	6010      	str	r0, [r2, #0]
 8007d92:	0628      	lsls	r0, r5, #24
 8007d94:	d501      	bpl.n	8007d9a <_printf_i+0xc2>
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	e002      	b.n	8007da0 <_printf_i+0xc8>
 8007d9a:	0668      	lsls	r0, r5, #25
 8007d9c:	d5fb      	bpl.n	8007d96 <_printf_i+0xbe>
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	4854      	ldr	r0, [pc, #336]	; (8007ef4 <_printf_i+0x21c>)
 8007da2:	296f      	cmp	r1, #111	; 0x6f
 8007da4:	bf14      	ite	ne
 8007da6:	220a      	movne	r2, #10
 8007da8:	2208      	moveq	r2, #8
 8007daa:	2100      	movs	r1, #0
 8007dac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007db0:	6865      	ldr	r5, [r4, #4]
 8007db2:	60a5      	str	r5, [r4, #8]
 8007db4:	2d00      	cmp	r5, #0
 8007db6:	f2c0 8095 	blt.w	8007ee4 <_printf_i+0x20c>
 8007dba:	6821      	ldr	r1, [r4, #0]
 8007dbc:	f021 0104 	bic.w	r1, r1, #4
 8007dc0:	6021      	str	r1, [r4, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d13d      	bne.n	8007e42 <_printf_i+0x16a>
 8007dc6:	2d00      	cmp	r5, #0
 8007dc8:	f040 808e 	bne.w	8007ee8 <_printf_i+0x210>
 8007dcc:	4665      	mov	r5, ip
 8007dce:	2a08      	cmp	r2, #8
 8007dd0:	d10b      	bne.n	8007dea <_printf_i+0x112>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	07db      	lsls	r3, r3, #31
 8007dd6:	d508      	bpl.n	8007dea <_printf_i+0x112>
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	6862      	ldr	r2, [r4, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	bfde      	ittt	le
 8007de0:	2330      	movle	r3, #48	; 0x30
 8007de2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007de6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007dea:	ebac 0305 	sub.w	r3, ip, r5
 8007dee:	6123      	str	r3, [r4, #16]
 8007df0:	f8cd 8000 	str.w	r8, [sp]
 8007df4:	463b      	mov	r3, r7
 8007df6:	aa03      	add	r2, sp, #12
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff fef6 	bl	8007bec <_printf_common>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d14d      	bne.n	8007ea0 <_printf_i+0x1c8>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	b005      	add	sp, #20
 8007e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e0e:	4839      	ldr	r0, [pc, #228]	; (8007ef4 <_printf_i+0x21c>)
 8007e10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007e14:	6813      	ldr	r3, [r2, #0]
 8007e16:	6821      	ldr	r1, [r4, #0]
 8007e18:	1d1d      	adds	r5, r3, #4
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6015      	str	r5, [r2, #0]
 8007e1e:	060a      	lsls	r2, r1, #24
 8007e20:	d50b      	bpl.n	8007e3a <_printf_i+0x162>
 8007e22:	07ca      	lsls	r2, r1, #31
 8007e24:	bf44      	itt	mi
 8007e26:	f041 0120 	orrmi.w	r1, r1, #32
 8007e2a:	6021      	strmi	r1, [r4, #0]
 8007e2c:	b91b      	cbnz	r3, 8007e36 <_printf_i+0x15e>
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	f022 0220 	bic.w	r2, r2, #32
 8007e34:	6022      	str	r2, [r4, #0]
 8007e36:	2210      	movs	r2, #16
 8007e38:	e7b7      	b.n	8007daa <_printf_i+0xd2>
 8007e3a:	064d      	lsls	r5, r1, #25
 8007e3c:	bf48      	it	mi
 8007e3e:	b29b      	uxthmi	r3, r3
 8007e40:	e7ef      	b.n	8007e22 <_printf_i+0x14a>
 8007e42:	4665      	mov	r5, ip
 8007e44:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e48:	fb02 3311 	mls	r3, r2, r1, r3
 8007e4c:	5cc3      	ldrb	r3, [r0, r3]
 8007e4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007e52:	460b      	mov	r3, r1
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d1f5      	bne.n	8007e44 <_printf_i+0x16c>
 8007e58:	e7b9      	b.n	8007dce <_printf_i+0xf6>
 8007e5a:	6813      	ldr	r3, [r2, #0]
 8007e5c:	6825      	ldr	r5, [r4, #0]
 8007e5e:	6961      	ldr	r1, [r4, #20]
 8007e60:	1d18      	adds	r0, r3, #4
 8007e62:	6010      	str	r0, [r2, #0]
 8007e64:	0628      	lsls	r0, r5, #24
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	d501      	bpl.n	8007e6e <_printf_i+0x196>
 8007e6a:	6019      	str	r1, [r3, #0]
 8007e6c:	e002      	b.n	8007e74 <_printf_i+0x19c>
 8007e6e:	066a      	lsls	r2, r5, #25
 8007e70:	d5fb      	bpl.n	8007e6a <_printf_i+0x192>
 8007e72:	8019      	strh	r1, [r3, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	4665      	mov	r5, ip
 8007e7a:	e7b9      	b.n	8007df0 <_printf_i+0x118>
 8007e7c:	6813      	ldr	r3, [r2, #0]
 8007e7e:	1d19      	adds	r1, r3, #4
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	681d      	ldr	r5, [r3, #0]
 8007e84:	6862      	ldr	r2, [r4, #4]
 8007e86:	2100      	movs	r1, #0
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f7f8 f9a9 	bl	80001e0 <memchr>
 8007e8e:	b108      	cbz	r0, 8007e94 <_printf_i+0x1bc>
 8007e90:	1b40      	subs	r0, r0, r5
 8007e92:	6060      	str	r0, [r4, #4]
 8007e94:	6863      	ldr	r3, [r4, #4]
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e9e:	e7a7      	b.n	8007df0 <_printf_i+0x118>
 8007ea0:	6923      	ldr	r3, [r4, #16]
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	47c0      	blx	r8
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d0aa      	beq.n	8007e04 <_printf_i+0x12c>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	079b      	lsls	r3, r3, #30
 8007eb2:	d413      	bmi.n	8007edc <_printf_i+0x204>
 8007eb4:	68e0      	ldr	r0, [r4, #12]
 8007eb6:	9b03      	ldr	r3, [sp, #12]
 8007eb8:	4298      	cmp	r0, r3
 8007eba:	bfb8      	it	lt
 8007ebc:	4618      	movlt	r0, r3
 8007ebe:	e7a3      	b.n	8007e08 <_printf_i+0x130>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	464a      	mov	r2, r9
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	47c0      	blx	r8
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d09a      	beq.n	8007e04 <_printf_i+0x12c>
 8007ece:	3501      	adds	r5, #1
 8007ed0:	68e3      	ldr	r3, [r4, #12]
 8007ed2:	9a03      	ldr	r2, [sp, #12]
 8007ed4:	1a9b      	subs	r3, r3, r2
 8007ed6:	42ab      	cmp	r3, r5
 8007ed8:	dcf2      	bgt.n	8007ec0 <_printf_i+0x1e8>
 8007eda:	e7eb      	b.n	8007eb4 <_printf_i+0x1dc>
 8007edc:	2500      	movs	r5, #0
 8007ede:	f104 0919 	add.w	r9, r4, #25
 8007ee2:	e7f5      	b.n	8007ed0 <_printf_i+0x1f8>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1ac      	bne.n	8007e42 <_printf_i+0x16a>
 8007ee8:	7803      	ldrb	r3, [r0, #0]
 8007eea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef2:	e76c      	b.n	8007dce <_printf_i+0xf6>
 8007ef4:	08008039 	.word	0x08008039
 8007ef8:	0800804a 	.word	0x0800804a

08007efc <memcpy>:
 8007efc:	b510      	push	{r4, lr}
 8007efe:	1e43      	subs	r3, r0, #1
 8007f00:	440a      	add	r2, r1
 8007f02:	4291      	cmp	r1, r2
 8007f04:	d100      	bne.n	8007f08 <memcpy+0xc>
 8007f06:	bd10      	pop	{r4, pc}
 8007f08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f10:	e7f7      	b.n	8007f02 <memcpy+0x6>

08007f12 <memmove>:
 8007f12:	4288      	cmp	r0, r1
 8007f14:	b510      	push	{r4, lr}
 8007f16:	eb01 0302 	add.w	r3, r1, r2
 8007f1a:	d807      	bhi.n	8007f2c <memmove+0x1a>
 8007f1c:	1e42      	subs	r2, r0, #1
 8007f1e:	4299      	cmp	r1, r3
 8007f20:	d00a      	beq.n	8007f38 <memmove+0x26>
 8007f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f26:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f2a:	e7f8      	b.n	8007f1e <memmove+0xc>
 8007f2c:	4283      	cmp	r3, r0
 8007f2e:	d9f5      	bls.n	8007f1c <memmove+0xa>
 8007f30:	1881      	adds	r1, r0, r2
 8007f32:	1ad2      	subs	r2, r2, r3
 8007f34:	42d3      	cmn	r3, r2
 8007f36:	d100      	bne.n	8007f3a <memmove+0x28>
 8007f38:	bd10      	pop	{r4, pc}
 8007f3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f42:	e7f7      	b.n	8007f34 <memmove+0x22>

08007f44 <_realloc_r>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	4607      	mov	r7, r0
 8007f48:	4614      	mov	r4, r2
 8007f4a:	460e      	mov	r6, r1
 8007f4c:	b921      	cbnz	r1, 8007f58 <_realloc_r+0x14>
 8007f4e:	4611      	mov	r1, r2
 8007f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f54:	f7ff bc6c 	b.w	8007830 <_malloc_r>
 8007f58:	b922      	cbnz	r2, 8007f64 <_realloc_r+0x20>
 8007f5a:	f7ff fc1b 	bl	8007794 <_free_r>
 8007f5e:	4625      	mov	r5, r4
 8007f60:	4628      	mov	r0, r5
 8007f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f64:	f000 f814 	bl	8007f90 <_malloc_usable_size_r>
 8007f68:	42a0      	cmp	r0, r4
 8007f6a:	d20f      	bcs.n	8007f8c <_realloc_r+0x48>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4638      	mov	r0, r7
 8007f70:	f7ff fc5e 	bl	8007830 <_malloc_r>
 8007f74:	4605      	mov	r5, r0
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d0f2      	beq.n	8007f60 <_realloc_r+0x1c>
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4622      	mov	r2, r4
 8007f7e:	f7ff ffbd 	bl	8007efc <memcpy>
 8007f82:	4631      	mov	r1, r6
 8007f84:	4638      	mov	r0, r7
 8007f86:	f7ff fc05 	bl	8007794 <_free_r>
 8007f8a:	e7e9      	b.n	8007f60 <_realloc_r+0x1c>
 8007f8c:	4635      	mov	r5, r6
 8007f8e:	e7e7      	b.n	8007f60 <_realloc_r+0x1c>

08007f90 <_malloc_usable_size_r>:
 8007f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f94:	1f18      	subs	r0, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bfbc      	itt	lt
 8007f9a:	580b      	ldrlt	r3, [r1, r0]
 8007f9c:	18c0      	addlt	r0, r0, r3
 8007f9e:	4770      	bx	lr

08007fa0 <_init>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	bf00      	nop
 8007fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa6:	bc08      	pop	{r3}
 8007fa8:	469e      	mov	lr, r3
 8007faa:	4770      	bx	lr

08007fac <_fini>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr
